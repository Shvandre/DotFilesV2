import{a as n}from"./chunk-RALT2YVD.js";import{a as u,b as i,c as g}from"./chunk-UCBZOSRF.js";import{Ic as w,Nc as A,kd as M}from"./chunk-3GZCHS7Y.js";import{F as m,b as E}from"./chunk-WP4K54AS.js";import{C as p}from"./chunk-UCPKAIVR.js";import{a as b}from"./chunk-57IY32VM.js";import{a as x}from"./chunk-ICCUGV36.js";import{f as l,h as y,m as Buffer,n as f}from"./chunk-3KENBVE7.js";y();f();var d=l(E()),R=l(b()),o=l(x());var P=async(s,e,r)=>{let t=e.fold(h=>Buffer.from(h.buffer).toString("base64")),a=n("importPrivateKeyAccount",[s,t,r]),c=await p.startSpan("importPrivateKeyAccount",()=>g(o.default.runtime,a));if("error"in c)throw new Error(c.error.message);if(typeof c.result=="string")return JSON.parse(c.result);throw new Error("importPrivateKeyAccount: Invalid response from background script")},_=async(s,e,r)=>{let t=s.getEntropy(),a=n("importSeedAccount",[d.default.encode(t),e,r]);t.fill(0);let c=await p.startSpan("importSeedAccount",()=>g(o.default.runtime,a));if("error"in c)throw new Error(c.error.message);if(typeof c.result=="string")return JSON.parse(c.result);throw new Error("importS*edAccount: Invalid response from background script")},$=async(s,e,r)=>{let t=s.getEntropy(),a=n("importSocialSeedAccount",[d.default.encode(t),e,r]);t.fill(0);let c=await p.startSpan("importSeedlessAccount",()=>g(o.default.runtime,a));if("error"in c)throw new Error(c.error.message);if(typeof c.result=="string")return JSON.parse(c.result);throw new Error("importS*edlessAccount: Invalid response from background script")},ee=async s=>{let e=s.getEntropy(),r=n("isExistingSeed",d.default.encode(e));e.fill(0);let t=await p.startSpan("isExistingSeed",()=>g(o.default.runtime,r));if("error"in t)throw new Error(t.error.message);if(typeof t.result=="boolean"||t.result===null)return t.result;throw new Error("isExistingS*ed: Invalid response from background script")},B=async s=>{let e=n("addAccountForSeed",[s]),r=await p.startSpan("addAccountForSeed",async()=>i(await o.default.runtime.sendMessage(u(e))));if("error"in r)throw new Error(r.error.message);if(typeof r.result=="string")return JSON.parse(r.result);throw new Error("addAccountForS*ed: Invalid response from background script")},v=async s=>{let e=n("addAccountForSeedless",[s]),r=await p.startSpan("addAccountForSeedless",async()=>i(await o.default.runtime.sendMessage(u(e))));if("error"in r)throw new Error(r.error.message);if(typeof r.result=="string")return JSON.parse(r.result);throw new Error("addAccountForS*ed: Invalid response from background script")},V=async(s,e)=>{let r=n("addLedgerAccounts",[s,e]),t=await p.startSpan("connectLedgerAccounts",async()=>i(await o.default.runtime.sendMessage(u(r))));if("error"in t)throw new Error(t.error.message);if(typeof t.result=="string")return JSON.parse(t.result);throw new Error("connectLedgerAccounts: Invalid response from background script")},q=async s=>{let e=n("importReadOnlyAccount",s),r=await p.startSpan("addReadonlyAccount",async()=>i(await o.default.runtime.sendMessage(u(e))));if("error"in r)throw new Error(r.error.message);if(typeof r.result=="string")return JSON.parse(r.result);throw new Error("addReadonlyAccount: Invalid response from background script")},re=async(s,e,r)=>{let t=n("exportPrivateKey",[s,e,r]),a=await p.startSpan("exportPrivateKey",async()=>i(await o.default.runtime.sendMessage(u(t))));if("error"in a)throw new Error(a.error.message);if(typeof a.result=="string")return m.from(Buffer.from(a.result,"hex"));throw new Error("exportPrivateKey: Invalid response from background script")},se=async(s,e)=>{let r=n("exportEntropy",[s,e]),t=await p.startSpan("exportEntropy",async()=>i(await o.default.runtime.sendMessage(u(r))));if("error"in t)throw new Error(t.error.message);if(typeof t.result=="string")return m.from(Buffer.from(t.result,"hex"));throw new Error("exportEntropy: Invalid response from background script")},I=async()=>{let s=n("deriveAddresses",void 0),e=await g(o.default.runtime,s);if("error"in e)throw new Error(e.error.message);return e.result},k=async s=>{let e=n("removeAccount",s),r=await g(o.default.runtime,e);if("error"in r)throw new Error(r.error.message);return r.result},O=async(s,e)=>{let r=n("reorderAccount",{identifier:s,toIndex:e}),t=await g(o.default.runtime,r);if("error"in t)throw new Error(t.error.message);return t.result},C=async s=>{let e=n("syncAccounts",{syncedAccounts:s}),r=i(await o.default.runtime.sendMessage(u(e)));if("error"in r)throw new Error(r.error.message);return r.result},N=async()=>{let s=n("getAllAccounts",void 0),e=i(await o.default.runtime.sendMessage(u(s)));if("error"in e)throw new Error(e.error.message);if(typeof e.result=="string"){let r=JSON.parse(e.result);return w({accounts:r}).accounts}throw new Error("fetchAllAccounts: Invalid response from background script")},K=async()=>{let s=n("getAllSeeds",void 0),e=i(await o.default.runtime.sendMessage(u(s)));if("error"in e)throw new Error(e.error.message);if(typeof e.result=="string")return JSON.parse(e.result);throw new Error("fetchAllSe*dMetas: Invalid response from background script")},J=async()=>{let s=n("getAllSeedlessSeeds",void 0),e=i(await o.default.runtime.sendMessage(u(s)));if("error"in e)throw new Error(e.error.message);if(typeof e.result=="string")return JSON.parse(e.result);throw new Error("fetchAllSe*dlessMetas: Invalid response from background script")},T=async s=>{let e=n("getAuthenticationPublicKey",{secretIdentifier:s}),r=i(await o.default.runtime.sendMessage(u(e)));if("error"in r)throw new Error(r.error.message);if(typeof r.result=="string")return JSON.parse(r.result);throw new Error("getAuthenticationPublicK*y: Invalid response from background script")},F=async()=>{let s=n("checkVaultIntegrity",void 0),e=i(await o.default.runtime.sendMessage(u(s)));if("error"in e)throw new Error(e.error.message);return e.result},L=async(s,e)=>{let r=A.parse(e);"chainType"in r&&r.chainType==="solana"&&r.signingType==="transaction"&&typeof r.message!="string"&&(r.message=d.default.encode(r.message));let t=n("sign",{accountIdentifier:s,params:r}),a=i(await o.default.runtime.sendMessage(u(t)));if("error"in a)throw new Error(a.error.message);if(typeof a.result=="string")return i(a.result);throw new Error("sign: Invalid response from background script")},S={addAccountForSeed:B,addReadonlyAccount:q,importPrivateKeyAccount:P,connectLedgerAccounts:V,fetchAllAccounts:N,fetchAllSeedMetas:K,fetchAllSeedlessMetas:J,connectSolanaSeedVaultAccounts:()=>{throw new Error("Solana Seed Vault is not supported on browser extension.")},deriveAddresses:I,removeAccount:async s=>{if(!await k(s))throw new Error("Error while removing account")},reorderAccount:async(s,e)=>{if(!await O(s,e))throw new Error("Error while reordering account")},sign:L,getAuthenticationPublicKey:T,syncAccounts:C,addAccountForSeedless:v,checkVaultIntegrity:F,getCashAddress:async()=>{throw new Error("getCashAddress: Not implemented on browser extension")},getAgentAddress:async()=>{throw new Error("getAgentAddress: Not implemented on browser extension")}},te=()=>S;function ne({children:s}){return R.default.createElement(M,{vault:S},s)}export{_ as a,$ as b,ee as c,re as d,se as e,J as f,te as g,ne as h};
//# sourceMappingURL=chunk-KI5DTAW7.js.map
