{"version":3,"file":"static/js/393.a55e4821.chunk.js","mappings":"4UAuBMA,EAASC,EAAAA,GAAAA,IAAH,4DAKNC,EAAOD,EAAAA,GAAAA,IAAH,qJAED,SAACE,GAAD,OAAWA,EAAMC,MAAMC,OAAvB,IACG,SAACF,GAAD,OAAWA,EAAMC,MAAMC,OAAvB,IACC,SAACF,GAAD,OAAWA,EAAMC,MAAMC,OAAvB,IACgB,SAACF,GAAD,OAAWA,EAAMC,MAAME,QAAvB,IAIvBC,EAASN,EAAAA,GAAAA,KAAH,kHAOCO,EAAYP,EAAAA,GAAAA,IAAH,+CAITQ,EAAc,WACzB,IAAMC,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,IAC3B,GAA6BC,EAAAA,EAAAA,KAArBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,WACd,GAA+CC,EAAAA,EAAAA,GAAsBF,GAArDG,EAAhB,EAAQC,OAAkBC,EAA1B,EAA0BA,UAAWC,EAArC,EAAqCA,OAErCC,EAAAA,EAAAA,YAAU,WACRD,GACD,GAAE,CAACL,IAEJ,IAAMO,GAAQC,EAAAA,EAAAA,UAA4B,WACxC,OAAKT,GAASJ,EAAQc,cACfC,EAAAA,EAAAA,IAAqBX,EAAMJ,EAAQc,cADC,EAE5C,GAAE,CAACV,EAAMC,EAAYL,IAEtB,OACE,iCACE,SAAC,IAAD,KACA,UAAC,KAAD,YACE,SAAC,EAAAgB,GAAD,+BACA,SAAC,KAAD,mGAIA,UAAC1B,EAAD,WACGe,IACC,SAAC,KAAD,WACE,SAAC,KAAD,4BAGFA,GAA+B,IAAjBO,EAAMK,SACpB,SAAC,KAAD,WACE,SAAC,KAAD,sBAGHL,EAAMM,KAAI,SAACC,GACV,OACE,UAAC3B,EAAD,WACG2B,EAAKC,OAAQ,SAAC,KAAD,CAAMC,IAAKF,EAAKC,KAAME,IAAI,UACxC,SAACzB,EAAD,UAASsB,EAAKI,UACd,SAAC,KAAD,CACEC,QAAS,kBACP,UAAC,KAAD,YACE,SAAC1B,EAAD,oDAGA,SAAC,KAAD,CACE2B,QAAS,WACPlB,EAAS,CACPgB,OAAQJ,EAAKI,OACbG,OAAQ1B,EAAQc,cAEnB,EANH,SAQGL,EAAY,cAAgB,iBAb1B,EADX,UAmBE,SAAC,KAAD,6BAtBOU,EAAKI,OA0BnB,YAKV,EAED,W,gMCvGapB,EAAiB,WAC5B,IAAMwB,GAAU1B,EAAAA,EAAAA,YAAW2B,EAAAA,IAC3B,OAAOC,EAAAA,EAAAA,GAAS,CAACF,EAASG,EAAAA,GAAAA,aAAuB,kBAC/CC,EAAAA,EAAAA,IACED,EAAAA,GAAAA,WACAE,EAAAA,EACAL,EAJ6C,GAOlD,EAMYrB,EAAwB,SAAC2B,GACpC,IAAMN,GAAU1B,EAAAA,EAAAA,YAAW2B,EAAAA,IACrBM,GAASC,EAAAA,EAAAA,MACf,OAAOC,EAAAA,EAAAA,GAAW,yCAAsB,+FAASb,EAAT,EAASA,OAAQG,EAAjB,EAAiBA,OAClDO,EADiC,wDAGtCA,GAAcI,EAAAA,EAAAA,IAAiBJ,EAAaV,EAAQG,GAHd,UAKhCY,EAAAA,EAAAA,IAAeL,EAAaN,GALI,OAMtCO,EAAOK,kBAAkB,CAACZ,EAASG,EAAAA,GAAAA,aANG,2CAAtB,sDAQnB,C","sources":["view/screen/connections/Connections.tsx","view/screen/connections/api.ts"],"sourcesContent":["import { useContext, useEffect, useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  getWalletConnections,\n  WalletConnection,\n} from \"../../../libs/state/connectionSerivce\";\nimport {\n  Badge,\n  Body,\n  Center,\n  H1,\n  Logo,\n  Text,\n} from \"../../components/Components\";\nimport {\n  DropDown,\n  DropDownListPayload,\n  ListItem,\n} from \"../../components/DropDown\";\nimport { HomeButton } from \"../../components/HomeButton\";\nimport { AccountStateContext } from \"../../context\";\nimport { useConnections, useDisconnectMutation } from \"./api\";\n\nconst Scroll = styled.div`\n  flex-grow: 1;\n  overflow: auto;\n`;\n\nconst Item = styled.div`\n  display: flex;\n  gap: ${(props) => props.theme.padding};\n  margin: ${(props) => props.theme.padding} 0;\n  padding: ${(props) => props.theme.padding} 0;\n  border-bottom: 1px solid ${(props) => props.theme.darkGray};\n  align-items: center;\n`;\n\nconst Origin = styled.span`\n  flex-grow: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nexport const ListTitle = styled.div`\n  padding: 10px 20px;\n`;\n\nexport const Connections = () => {\n  const account = useContext(AccountStateContext);\n  const { data, isFetching } = useConnections();\n  const { mutate: onDelete, isLoading, reset } = useDisconnectMutation(data);\n\n  useEffect(() => {\n    reset();\n  }, [isFetching]);\n\n  const items = useMemo<WalletConnection[]>(() => {\n    if (!data || !account.activeWallet) return [];\n    return getWalletConnections(data, account.activeWallet);\n  }, [data, isFetching, account]);\n\n  return (\n    <>\n      <HomeButton />\n      <Body>\n        <H1>Connected sites</H1>\n        <Text>\n          Wallet is connected to these sites. They can view your account address\n          and balance.\n        </Text>\n        <Scroll>\n          {isFetching && (\n            <Center>\n              <Text>Loading...</Text>\n            </Center>\n          )}\n          {!isFetching && items.length === 0 && (\n            <Center>\n              <Text>Empty</Text>\n            </Center>\n          )}\n          {items.map((item) => {\n            return (\n              <Item key={item.origin}>\n                {item.logo && <Logo src={item.logo} alt=\"Logo\" />}\n                <Origin>{item.origin}</Origin>\n                <DropDown\n                  payload={() => (\n                    <DropDownListPayload>\n                      <ListTitle>\n                        Are you sure you want to disconnect?\n                      </ListTitle>\n                      <ListItem\n                        onClick={() => {\n                          onDelete({\n                            origin: item.origin,\n                            wallet: account.activeWallet!,\n                          });\n                        }}\n                      >\n                        {isLoading ? \"Deleting...\" : \"Disconnect\"}\n                      </ListItem>\n                    </DropDownListPayload>\n                  )}\n                >\n                  <Badge>Disconnect</Badge>\n                </DropDown>\n              </Item>\n            );\n          })}\n        </Scroll>\n      </Body>\n    </>\n  );\n};\n\nexport default Connections;\n","import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useContext } from \"react\";\nimport {\n  Connections,\n  defaultConnections,\n} from \"../../../libs/entries/connection\";\nimport { revokeDAppAccess } from \"../../../libs/state/connectionSerivce\";\nimport {\n  getNetworkStoreValue,\n  QueryType,\n  setConnections,\n} from \"../../../libs/store/browserStore\";\nimport { NetworkContext } from \"../../context\";\n\nexport const useConnections = () => {\n  const network = useContext(NetworkContext);\n  return useQuery([network, QueryType.connection], () =>\n    getNetworkStoreValue<Connections>(\n      QueryType.connection,\n      defaultConnections,\n      network\n    )\n  );\n};\n\ntype Params = {\n  origin: string;\n  wallet: string;\n};\nexport const useDisconnectMutation = (connections: Connections | undefined) => {\n  const network = useContext(NetworkContext);\n  const client = useQueryClient();\n  return useMutation<void, Error, Params>(async ({ origin, wallet }) => {\n    if (!connections) return;\n\n    connections = revokeDAppAccess(connections, origin, wallet);\n\n    await setConnections(connections, network);\n    client.invalidateQueries([network, QueryType.connection]);\n  });\n};\n"],"names":["Scroll","styled","Item","props","theme","padding","darkGray","Origin","ListTitle","Connections","account","useContext","AccountStateContext","useConnections","data","isFetching","useDisconnectMutation","onDelete","mutate","isLoading","reset","useEffect","items","useMemo","activeWallet","getWalletConnections","H1","length","map","item","logo","src","alt","origin","payload","onClick","wallet","network","NetworkContext","useQuery","QueryType","getNetworkStoreValue","defaultConnections","connections","client","useQueryClient","useMutation","revokeDAppAccess","setConnections","invalidateQueries"],"sourceRoot":""}