{"version":3,"file":"static/js/710.f1d6276b.chunk.js","mappings":"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","sources":["view/screen/settings/route.ts","view/screen/settings/Experimental.tsx","view/screen/settings/General.tsx","view/screen/settings/Network.tsx","view/screen/settings/password/api.ts","view/screen/settings/password/WebAuthnMigrationDisable.tsx","view/screen/settings/password/WebAuthnMigrationEnable.tsx","view/screen/settings/Settings.tsx"],"sourcesContent":["export enum SettingsRoutes {\n  about = \"/about\",\n  general = \"/general\",\n  network = \"/network\",\n  experimental = \"/experimental\",\n  enableWebAuthn = \"/enable-web-authn\",\n  disableWebAuthn = \"/disable-web-authn\",\n  changePassword = \"/change-password\",\n  index = \"/\",\n}\n","import { useMemo } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Logger } from \"../../../libs/logger\";\nimport { Body, ButtonNegative, H1 } from \"../../components/Components\";\nimport { HomeButton } from \"../../components/HomeButton\";\nimport { AppRoute } from \"../../routes\";\nimport { useAuthConfiguration } from \"./api\";\nimport { SettingsRoutes } from \"./route\";\n\nconst Quote = styled.div`\n  padding: 5px 0;\n`;\n\nfunction browserSupportsWebAuthn() {\n  if (window.PublicKeyCredential) {\n    Logger.log(\"Supported.\");\n    return true;\n  } else {\n    Logger.log(\"Not supported.\");\n    return false;\n  }\n}\n\nexport const WebAuthn = () => {\n  const navigate = useNavigate();\n\n  const supported = useMemo<boolean>(() => browserSupportsWebAuthn(), []);\n\n  const { data } = useAuthConfiguration();\n  const isEnabled = data?.kind == \"webauthn\";\n\n  if (!supported) {\n    return (\n      <>\n        <ButtonNegative disabled={true}>Enable Biometric Auth</ButtonNegative>\n        <Quote>It seems this browser does not support WebAuthn...</Quote>\n      </>\n    );\n  }\n\n  if (isEnabled) {\n    return (\n      <ButtonNegative\n        onClick={() => navigate(`..${SettingsRoutes.disableWebAuthn}`)}\n      >\n        Disable Biometric Authentication\n      </ButtonNegative>\n    );\n  } else {\n    return (\n      <>\n        <ButtonNegative\n          onClick={() => navigate(`..${SettingsRoutes.enableWebAuthn}`)}\n        >\n          Enable Biometric Authentication\n        </ButtonNegative>\n        <Quote>\n          Enable biometric wallet authentication with WebAuthn. WebAuthn is a\n          browser API that enables the use of physical, cryptographically-secure\n          hardware \"authenticators\" to provide stronger replacements to\n          passwords.\n        </Quote>\n      </>\n    );\n  }\n};\n\nexport const ExperimentalSettings = () => {\n  return (\n    <>\n      <HomeButton path={AppRoute.settings} text=\"Back to Settings\" />\n      <Body>\n        <H1>Experimental</H1>\n\n        <WebAuthn />\n      </Body>\n    </>\n  );\n};\n","import styled from \"styled-components\";\nimport { ProxyHost, PublicTonProxy } from \"../../../libs/entries/proxy\";\nimport ExtensionPlatform from \"../../../libs/service/extension\";\nimport {\n  Body,\n  ErrorMessage,\n  H1,\n  InlineLink,\n  SelectLabel,\n  SelectPayload,\n} from \"../../components/Components\";\nimport { DropDownList } from \"../../components/DropDown\";\nimport { HomeButton } from \"../../components/HomeButton\";\nimport { ArrowDownIcon, LinkIcon } from \"../../components/Icons\";\nimport { AppRoute } from \"../../routes\";\nimport {\n  useDataCollection,\n  useLockScreen,\n  useProxyConfiguration,\n  useSetDataCollection,\n  useSetLockScreen,\n  useUpdateProxyMutation,\n} from \"./api\";\n\nconst Quote = styled.div`\n  padding: 5px 0;\n`;\n\nconst ProxyItems = (PublicTonProxy as (ProxyHost | undefined)[]).concat([\n  undefined,\n]);\n\nconst TONProxyInfoLink =\n  \"https://telegra.ph/ION-Sites-ION-WWW-and-ION-Proxy-09-29-2\";\n\nconst ProxySelect = () => {\n  const { data: proxy, isFetching } = useProxyConfiguration();\n  const { mutate, reset, isLoading, error } = useUpdateProxyMutation();\n\n  const updateProxy = (host: ProxyHost | undefined) => {\n    reset();\n    mutate(host);\n  };\n\n  const disableProxy = isFetching || isLoading;\n\n  return (\n    <>\n      <SelectLabel>ION Proxy</SelectLabel>\n      <DropDownList\n        isLeft\n        options={ProxyItems}\n        renderOption={(value) =>\n          value ? `ION ${value.host}:${value.port}` : \"Disabled\"\n        }\n        onSelect={(value) => updateProxy(value)}\n        disabled={disableProxy}\n      >\n        <SelectPayload disabled={disableProxy}>\n          {proxy?.enabled\n            ? `ION ${proxy.domains[\"ton\"].host}:${proxy.domains[\"ton\"].port}`\n            : \"Disabled\"}\n          <ArrowDownIcon />\n        </SelectPayload>\n      </DropDownList>\n      <Quote>\n        ION Proxy configuration to enabled ION WWW and ION Sites in your browser{\" \"}\n        <InlineLink\n          onClick={() => ExtensionPlatform.openTab({ url: TONProxyInfoLink })}\n        >\n          Read more <LinkIcon />\n        </InlineLink>\n        <br />\n        <br />\n        ION search engine:{\" \"}\n        <InlineLink\n          onClick={() =>\n            ExtensionPlatform.openTab({ url: \"http://searching.ton\" })\n          }\n        >\n          http://searching.ton <LinkIcon />\n        </InlineLink>\n      </Quote>\n      {error && <ErrorMessage>{error.message}</ErrorMessage>}\n    </>\n  );\n};\n\nconst LockScreenSelect = () => {\n  const { data: isLockScreen } = useLockScreen();\n  const { mutate } = useSetLockScreen();\n  return (\n    <>\n      <SelectLabel>Lock Screen</SelectLabel>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isLockScreen}\n          onChange={(e) => mutate(e.target.checked)}\n        />\n        Enable Lock Screen\n      </label>\n    </>\n  );\n};\n\nconst DataCollectionSelect = () => {\n  const { data: isEnabled } = useDataCollection();\n  const { mutate } = useSetDataCollection();\n\n  return (\n    <>\n      <SelectLabel>Analytics</SelectLabel>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isEnabled}\n          onChange={(e) => mutate(e.target.checked)}\n        />\n        Enable Data Collection to help OpenMask improve user experience\n      </label>\n    </>\n  );\n};\n\nexport const GeneralSettings = () => {\n  return (\n    <>\n      <HomeButton path={AppRoute.settings} text=\"Back to Settings\" />\n      <Body>\n        <H1>General</H1>\n        <LockScreenSelect />\n        <DataCollectionSelect />\n        <ProxySelect />\n      </Body>\n    </>\n  );\n};\n","import { FC, useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { NetworkConfig } from \"../../../libs/entries/network\";\nimport {\n  Body,\n  ErrorMessage,\n  H1,\n  H3,\n  Scroll,\n} from \"../../components/Components\";\nimport { HomeButton } from \"../../components/HomeButton\";\nimport { InputField } from \"../../components/InputField\";\nimport { NetworksContext } from \"../../context\";\nimport { AppRoute } from \"../../routes\";\nimport { useNetworkMutation } from \"./api\";\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${(props) => props.theme.padding};\n  margin: 5px 0;\n  padding-bottom: ${(props) => props.theme.padding};\n  border-bottom: 1px solid ${(props) => props.theme.darkGray};\n  align-items: center;\n\n  > * {\n    width: 100%;\n  }\n`;\n\nconst NetworkConfiguration: FC<{ network: NetworkConfig }> = ({ network }) => {\n  const {\n    mutate: onChange,\n    isLoading,\n    error,\n  } = useNetworkMutation(network.name);\n  const [id, setId] = useState(network.id as string);\n  const [rpcUrl, setRpsUrl] = useState(network.rpcUrl);\n  const [apiKey, setApiKey] = useState(\n    network.isCustom ? network.apiKey : \"default\"\n  );\n  const [scanUrl, setScanUrl] = useState(network.scanUrl);\n  const [rootDnsAddress, setRootDnsAddress] = useState(network.rootDnsAddress);\n\n  const disabled = isLoading || !network.isCustom;\n\n  return (\n    <Row>\n      <H3>{network.name}</H3>\n      {error && <ErrorMessage>{error.message}</ErrorMessage>}\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={!!network.isCustom}\n          onChange={(e) =>\n            onChange({\n              isCustom: e.target.checked,\n            })\n          }\n        />\n        Custom configuration\n      </label>\n\n      <div>\n        <InputField\n          label=\"Chain Id\"\n          disabled={disabled}\n          value={id}\n          onChange={(e) => setId(e.target.value)}\n          onBlur={() => onChange({ id })}\n        />\n      </div>\n\n      <div>\n        <InputField\n          label=\"RPC URL\"\n          disabled={disabled}\n          value={rpcUrl}\n          onChange={(e) => setRpsUrl(e.target.value)}\n          onBlur={() => onChange({ rpcUrl })}\n        />\n      </div>\n\n      <div>\n        <InputField\n          label=\"RPC Authorization Key\"\n          disabled={disabled}\n          value={apiKey}\n          onChange={(e) => setApiKey(e.target.value)}\n          onBlur={() => onChange({ apiKey })}\n        />\n      </div>\n      <div>\n        <InputField\n          label=\"Scan URL\"\n          disabled={disabled}\n          value={scanUrl}\n          onChange={(e) => setScanUrl(e.target.value)}\n          onBlur={() => onChange({ scanUrl })}\n        />\n      </div>\n      <div>\n        <InputField\n          label=\"Root ION DNS Address\"\n          disabled={disabled}\n          value={rootDnsAddress}\n          onChange={(e) => setRootDnsAddress(e.target.value)}\n          onBlur={() => onChange({ rootDnsAddress })}\n        />\n      </div>\n    </Row>\n  );\n};\nexport const NetworkSettings = () => {\n  const networks = useContext(NetworksContext);\n\n  return (\n    <>\n      <HomeButton path={AppRoute.settings} text=\"Back to Settings\" />\n      <Body>\n        <H1>Networks</H1>\n\n        <Scroll>\n          {networks.map((network) => (\n            <NetworkConfiguration\n              key={`${network.name}${network.isCustom}`}\n              network={network}\n            />\n          ))}\n        </Scroll>\n      </Body>\n    </>\n  );\n};\n","import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport crypto from \"crypto\";\nimport browser from \"webextension-polyfill\";\nimport { AuthConfiguration, WebAuthn } from \"../../../../libs/entries/auth\";\nimport { Logger } from \"../../../../libs/logger\";\nimport { encrypt } from \"../../../../libs/service/cryptoService\";\nimport { delay, reEncryptWallets } from \"../../../../libs/state/accountService\";\nimport {\n  batchUpdateStore,\n  getAccountState,\n  getNetworkConfig,\n  QueryType,\n} from \"../../../../libs/store/browserStore\";\nimport { getAppPassword, getWebAuthnPassword } from \"../../../api\";\n\ndeclare global {\n  interface AuthenticationExtensionsClientInputs {\n    largeBlob?: {\n      support?: string;\n      write?: Uint8Array;\n      read?: boolean;\n    };\n    credBlob?: Uint8Array; // max 32 bytes\n    getCredBlob?: boolean;\n    hmacCreateSecret?: boolean;\n    hmacGetSecret?: { salt1: Uint8Array }; // 32-byte random data\n  }\n\n  interface AuthenticationExtensionsClientOutputs {\n    largeBlob?: {\n      supported?: boolean;\n      written?: boolean;\n      blob?: Uint8Array;\n    };\n    credBlob?: boolean;\n    hmacCreateSecret?: boolean;\n    hmacGetSecret?: { output1: Uint8Array };\n  }\n\n  interface AuthenticatorResponse {\n    getTransports?: () => AuthenticatorTransport[];\n  }\n}\n\nconst rpName = \"OpenMask Wallet\";\nconst userName = \"wallet@openmask.app\";\n\nconst getHost = () => {\n  const url = new URL(browser.runtime.getURL(\"index.html\"));\n  const rpID = url.hostname;\n\n  return {\n    rpID,\n  };\n};\n\nexport interface RegistrationResponse {\n  oldPassword: string;\n  type: \"largeBlob\" | \"credBlob\" | \"userHandle\";\n  password: {\n    largeBlob: string;\n    credBlob: string;\n    userHandle: string;\n  };\n  credential: PublicKeyCredential;\n}\n\nexport const useRegistrationMigration = () => {\n  return useMutation<RegistrationResponse, Error, void>(async () => {\n    const oldPassword = await getAppPassword(async (pass) => pass);\n\n    const { rpID } = getHost();\n\n    const userHandle = crypto.randomBytes(32);\n    const credBlob = crypto.randomBytes(32);\n    const largeBlob = crypto.randomBytes(64);\n\n    const options: CredentialCreationOptions = {\n      publicKey: {\n        challenge: crypto.randomBytes(32),\n        rp: {\n          name: rpName,\n          id: rpID,\n        },\n        user: {\n          id: userHandle,\n          name: userName,\n          displayName: rpName,\n        },\n        pubKeyCredParams: [\n          { type: \"public-key\", alg: -7 },\n          { type: \"public-key\", alg: -257 },\n        ],\n        authenticatorSelection: {\n          requireResidentKey: true,\n        },\n        extensions: {\n          credBlob: credBlob,\n          largeBlob: {\n            support: \"preferred\",\n          },\n          hmacCreateSecret: true,\n        },\n        timeout: 120000,\n        excludeCredentials: [],\n      },\n    };\n\n    const credential = (await navigator.credentials.create(\n      options\n    )) as PublicKeyCredential;\n\n    if (!credential) {\n      throw new Error(\"Missing credential\");\n    }\n\n    Logger.log({ credential });\n\n    const extensions = credential.getClientExtensionResults();\n\n    Logger.log(extensions);\n\n    const type = extensions.largeBlob?.supported\n      ? \"largeBlob\"\n      : extensions.credBlob\n      ? \"credBlob\"\n      : \"userHandle\";\n\n    const response: RegistrationResponse = {\n      oldPassword,\n      type,\n      password: {\n        largeBlob: largeBlob.toString(\"hex\"),\n        credBlob: credBlob.toString(\"hex\"),\n        userHandle: userHandle.toString(\"hex\"),\n      },\n      credential,\n    };\n    return response;\n  });\n};\n\nexport const useLargeBlobMigration = () => {\n  return useMutation<void, Error, RegistrationResponse>(\n    async ({ credential, password }) => {\n      await delay(300);\n\n      const transports =\n        credential.response &&\n        credential.response.getTransports &&\n        credential.response.getTransports();\n\n      const options: CredentialRequestOptions = {\n        publicKey: {\n          challenge: crypto.randomBytes(32),\n          allowCredentials: [\n            {\n              id: credential.rawId,\n              type: \"public-key\",\n              transports,\n            },\n          ],\n          userVerification: \"required\",\n          extensions: {\n            largeBlob: {\n              write: new Uint8Array(Buffer.from(password.largeBlob, \"hex\")),\n            },\n          },\n        },\n      };\n\n      const assertion = (await navigator.credentials.get(\n        options\n      )) as PublicKeyCredential;\n\n      if (!assertion) {\n        throw new Error(\"Missing authentication\");\n      }\n\n      const extensions = assertion.getClientExtensionResults();\n\n      if (!extensions.largeBlob?.written) {\n        throw new Error(\"Failed write large blob\");\n      }\n    }\n  );\n};\n\nexport const useVerificationMigration = () => {\n  return useMutation<ChangePasswordProps, Error, RegistrationResponse>(\n    async ({ credential, oldPassword, password, type }) => {\n      await delay(300);\n\n      const transports =\n        credential.response &&\n        credential.response.getTransports &&\n        credential.response.getTransports();\n\n      const credentialId = Buffer.from(credential.rawId).toString(\"hex\");\n\n      const options: CredentialRequestOptions = {\n        publicKey: {\n          challenge: crypto.randomBytes(32),\n          allowCredentials: [\n            {\n              id: credential.rawId,\n              type: \"public-key\",\n              transports,\n            },\n          ],\n          userVerification: \"required\",\n          extensions: {\n            getCredBlob: true,\n            largeBlob: {\n              read: true,\n            },\n          },\n        },\n      };\n\n      const assertion = (await navigator.credentials.get(\n        options\n      )) as PublicKeyCredential;\n\n      if (!assertion) {\n        throw new Error(\"Missing authentication\");\n      }\n\n      const response = assertion.response as AuthenticatorAssertionResponse;\n\n      Logger.log(assertion);\n\n      const extensions = assertion.getClientExtensionResults();\n\n      Logger.log(extensions);\n\n      let result: string | undefined = undefined;\n      switch (type) {\n        case \"largeBlob\": {\n          if (!extensions.largeBlob?.blob) {\n            throw new Error(\"Missing stored largeBlob\");\n          }\n          if (\n            !Buffer.from(password.largeBlob, \"hex\").equals(\n              Buffer.from(extensions.largeBlob?.blob)\n            )\n          ) {\n            throw new Error(\"Stored blob not equals passed blob\");\n          }\n          result = password.largeBlob;\n          break;\n        }\n        case \"userHandle\": {\n          if (!response.userHandle) {\n            throw new Error(\"Missing stored userHandle\");\n          }\n          if (\n            !Buffer.from(password.userHandle, \"hex\").equals(\n              Buffer.from(response.userHandle)\n            )\n          ) {\n            throw new Error(\"Stored blob not equals passed blob\");\n          }\n          result = password.userHandle;\n          break;\n        }\n      }\n\n      if (!result) {\n        throw new Error(\"Missing stored blob\");\n      }\n\n      const configuration: WebAuthn = {\n        kind: \"webauthn\",\n        type,\n        credentialId,\n        transports,\n      };\n\n      Logger.log(configuration);\n\n      const props: ChangePasswordProps = {\n        oldPassword: oldPassword,\n        password: result,\n        confirm: result,\n        configuration,\n      };\n      return props;\n    }\n  );\n};\n\nexport const useAuthorizationMigration = () => {\n  return useMutation<string, Error, void>(async () => {\n    return await getWebAuthnPassword(async (password) => password);\n  });\n};\n\ninterface ChangePasswordProps {\n  oldPassword: string;\n  password: string;\n  confirm: string;\n  configuration: AuthConfiguration;\n}\n\nexport const useChangePasswordMigration = () => {\n  const client = useQueryClient();\n  return useMutation<void, Error, ChangePasswordProps>(\n    async ({ oldPassword, password, confirm, configuration }) => {\n      if (password !== confirm) {\n        throw new Error(\"Confirm password incorrect\");\n      }\n      if (password.length <= 5) {\n        throw new Error(\"Password too short\");\n      }\n      const networks = await getNetworkConfig();\n\n      const accounts = await Promise.all(\n        networks.map(async (network) => {\n          const account = await getAccountState(network.name);\n          Logger.log(account);\n          return [\n            `${network.name}_${QueryType.account}`,\n            await reEncryptWallets(account, oldPassword, password),\n          ] as const;\n        })\n      );\n      Logger.log(accounts);\n\n      const script = await encrypt(password, password);\n\n      Logger.log(script);\n\n      const batchUpdate = Object.assign(Object.fromEntries(accounts), {\n        [QueryType.auth]: configuration,\n        [QueryType.script]: script,\n      });\n\n      Logger.log(batchUpdate);\n\n      await batchUpdateStore(batchUpdate);\n\n      await Promise.all(\n        Object.keys(batchUpdate).map((key) => client.invalidateQueries([key]))\n      );\n    }\n  );\n};\n","import { useCallback, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AuthPassword } from \"../../../../libs/entries/auth\";\nimport {\n  Body,\n  ButtonColumn,\n  ButtonNegative,\n  ButtonPositive,\n  ButtonRow,\n  Center,\n  ErrorMessage,\n  Gap,\n  H1,\n  Text,\n} from \"../../../components/Components\";\nimport { Fingerprint } from \"../../../components/Fingerprint\";\nimport { InputField } from \"../../../components/InputField\";\nimport { sendBackground } from \"../../../event\";\nimport { AppRoute } from \"../../../routes\";\nimport { useLockScreen } from \"../api\";\nimport { useAuthorizationMigration, useChangePasswordMigration } from \"./api\";\n\nexport const WebAuthnDisableMigration = () => {\n  const navigate = useNavigate();\n\n  const [start, setStart] = useState(false);\n  const [isDone, setDone] = useState(false);\n\n  const [oldPassword, setOldPassword] = useState(\"\");\n\n  const [password, setPassword] = useState(\"\");\n  const [confirm, setConfirm] = useState(\"\");\n\n  const {\n    mutateAsync: authorizationAsync,\n    error: authorizationError,\n    reset: authorizationReset,\n    isLoading: isAuthorization,\n  } = useAuthorizationMigration();\n\n  const {\n    mutateAsync: changeAsync,\n    error: changeError,\n    reset: changeReset,\n    isLoading: isChanging,\n  } = useChangePasswordMigration();\n\n  const onStart = useCallback(async () => {\n    setStart(true);\n\n    authorizationReset();\n\n    setOldPassword(await authorizationAsync());\n  }, []);\n\n  const onNext = async () => {\n    changeReset();\n    const configuration: AuthPassword = {\n      kind: \"password\",\n    };\n    await changeAsync({ oldPassword, password, confirm, configuration });\n    setDone(true);\n  };\n\n  const onCancel = useCallback(() => {\n    navigate(AppRoute.settings);\n  }, []);\n\n  const { data: isLockScreen } = useLockScreen();\n\n  const onLock = useCallback(() => {\n    sendBackground.message(\"lock\");\n  }, []);\n\n  return (\n    <Body>\n      <H1>Disable Biometric Authentication</H1>\n      <Gap />\n      {isAuthorization && (\n        <div>\n          <Center>\n            <Text>Step 1 of 2 - Authorization</Text>\n          </Center>\n          <Fingerprint />\n        </div>\n      )}\n      {oldPassword && !isDone && (\n        <div>\n          <Center>\n            <Text>Step 2 of 2 - New Password</Text>\n          </Center>\n          <InputField\n            label=\"New password\"\n            type=\"password\"\n            disabled={isChanging}\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputField\n            label=\"Confirm password\"\n            type=\"password\"\n            disabled={isChanging}\n            value={confirm}\n            onChange={(e) => setConfirm(e.target.value)}\n            error={changeError}\n          />\n        </div>\n      )}\n      {isDone && (\n        <div>\n          <Center>\n            <Text>New Password set!</Text>\n          </Center>\n        </div>\n      )}\n      <Gap />\n      {authorizationError && (\n        <ErrorMessage>{authorizationError.message}</ErrorMessage>\n      )}\n\n      {!isDone && (\n        <ButtonRow>\n          <ButtonNegative disabled={start} onClick={onCancel}>\n            Cancel\n          </ButtonNegative>\n          {oldPassword ? (\n            <ButtonPositive disabled={isChanging} onClick={onNext}>\n              Save\n            </ButtonPositive>\n          ) : (\n            <ButtonPositive disabled={start} onClick={onStart}>\n              Disable\n            </ButtonPositive>\n          )}\n        </ButtonRow>\n      )}\n      {isDone && (\n        <ButtonColumn>\n          {isLockScreen ? (\n            <ButtonPositive onClick={onLock}>Lock Account</ButtonPositive>\n          ) : (\n            <ButtonPositive onClick={() => navigate(AppRoute.home)}>\n              Home\n            </ButtonPositive>\n          )}\n        </ButtonColumn>\n      )}\n    </Body>\n  );\n};\n","import { useCallback, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Body,\n  ButtonColumn,\n  ButtonNegative,\n  ButtonPositive,\n  ButtonRow,\n  Center,\n  ErrorMessage,\n  Gap,\n  H1,\n  Text,\n} from \"../../../components/Components\";\nimport { Fingerprint } from \"../../../components/Fingerprint\";\nimport { sendBackground } from \"../../../event\";\nimport { AppRoute } from \"../../../routes\";\nimport { useLockScreen } from \"../api\";\nimport {\n  useChangePasswordMigration,\n  useLargeBlobMigration,\n  useRegistrationMigration,\n  useVerificationMigration,\n} from \"./api\";\n\nconst Note = () => {\n  return (\n    <>\n      <Text>\n        WebAuthn is a browser API that enables the use of physical,\n        cryptographically-secure hardware \"authenticators\" to provide stronger\n        replacements to passwords.\n      </Text>\n      <Text>\n        The feature \"Biometric Authentication\" is experimental and it will\n        re-encrypt mnemonic phrases. Back up your mnemonic phrases to not lost\n        access to wallets.\n      </Text>\n      <Text>\n        Enabling the feature required to enter biometrics two or there times.\n        For registration and for verification access.\n      </Text>\n    </>\n  );\n};\n\nexport const WebAuthnEnableMigration = () => {\n  const navigate = useNavigate();\n\n  const [total, setTotal] = useState(2);\n  const [start, setStart] = useState(false);\n  const [isDone, setDone] = useState(false);\n\n  const {\n    mutateAsync: registrationAsync,\n    error: registrationError,\n    reset: registrationReset,\n    isLoading: isRegistration,\n  } = useRegistrationMigration();\n\n  const {\n    mutateAsync: largeBlobAsync,\n    error: largeBlobError,\n    reset: largeBlobReset,\n    isLoading: isLargeBlob,\n  } = useLargeBlobMigration();\n\n  const {\n    mutateAsync: verificationAsync,\n    error: verificationError,\n    reset: verificationReset,\n    isLoading: isVerification,\n  } = useVerificationMigration();\n\n  const {\n    mutateAsync: changeAsync,\n    error: changeError,\n    reset: changeReset,\n    isLoading: isChanging,\n  } = useChangePasswordMigration();\n\n  const onRegistration = useCallback(async () => {\n    setStart(true);\n\n    registrationReset();\n    largeBlobReset();\n    verificationReset();\n    changeReset();\n\n    const result = await registrationAsync();\n    if (result.type === \"largeBlob\") {\n      setTotal(3);\n      await largeBlobAsync(result);\n    }\n    const props = await verificationAsync(result);\n    await changeAsync(props);\n    setDone(true);\n  }, []);\n\n  const onCancel = useCallback(() => {\n    navigate(AppRoute.settings);\n  }, []);\n\n  const { data: isLockScreen } = useLockScreen();\n\n  const onLock = useCallback(async () => {\n    sendBackground.message(\"lock\");\n  }, []);\n\n  const disabledCancel =\n    start &&\n    registrationError == null &&\n    verificationError == null &&\n    changeError == null;\n\n  return (\n    <Body>\n      <H1>Enable Biometric Authentication</H1>\n      {!start && <Note />}\n      <Gap />\n      {isRegistration && (\n        <div>\n          <Center>\n            <Text>Step 1 of 2 - Registration</Text>\n          </Center>\n          <Fingerprint />\n        </div>\n      )}\n      {isLargeBlob && (\n        <div>\n          <Center>\n            <Text>Step 2 of 3 - Store</Text>\n          </Center>\n          <Fingerprint />\n        </div>\n      )}\n      {(isVerification || isChanging) && (\n        <div>\n          <Center>\n            <Text>\n              Step {total} of {total} - Verification\n            </Text>\n          </Center>\n          <Fingerprint />\n        </div>\n      )}\n      {isDone && (\n        <div>\n          <Center>\n            <Text>Biometric Authentication Enabled!</Text>\n          </Center>\n          <Fingerprint />\n        </div>\n      )}\n      <Gap />\n      {registrationError && (\n        <ErrorMessage>{registrationError.message}</ErrorMessage>\n      )}\n      {verificationError && (\n        <ErrorMessage>{verificationError.message}</ErrorMessage>\n      )}\n      {changeError && <ErrorMessage>{changeError.message}</ErrorMessage>}\n      {largeBlobError && <ErrorMessage>{largeBlobError.message}</ErrorMessage>}\n\n      {!isDone && (\n        <ButtonRow>\n          <ButtonNegative disabled={disabledCancel} onClick={onCancel}>\n            Cancel\n          </ButtonNegative>\n          <ButtonPositive disabled={start} onClick={onRegistration}>\n            Enable\n          </ButtonPositive>\n        </ButtonRow>\n      )}\n      {isDone && (\n        <ButtonColumn>\n          {isLockScreen ? (\n            <ButtonPositive onClick={onLock}>Lock Account</ButtonPositive>\n          ) : (\n            <ButtonPositive onClick={() => navigate(AppRoute.home)}>\n              Home\n            </ButtonPositive>\n          )}\n        </ButtonColumn>\n      )}\n    </Body>\n  );\n};\n","import { Route, Routes, useNavigate } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport packageJson from \"../../../../package.json\";\nimport ExtensionPlatform from \"../../../libs/service/extension\";\nimport { Body, H1, Text, TextLink } from \"../../components/Components\";\nimport { HomeButton } from \"../../components/HomeButton\";\nimport { ArrowForwardIcon, LinkIcon } from \"../../components/Icons\";\nimport { AppRoute, relative } from \"../../routes\";\nimport { ExperimentalSettings } from \"./Experimental\";\nimport { GeneralSettings } from \"./General\";\nimport { NetworkSettings } from \"./Network\";\nimport { WebAuthnDisableMigration } from \"./password/WebAuthnMigrationDisable\";\nimport { WebAuthnEnableMigration } from \"./password/WebAuthnMigrationEnable\";\nimport { SettingsRoutes } from \"./route\";\n\nconst Item = styled.div`\n  font-size: large;\n  color: ${(props) => props.theme.darkBlue};\n  cursor: pointer;\n  font-width: bold;\n  padding: ${(props) => props.theme.padding} 0;\n  border-bottom: 1px solid ${(props) => props.theme.darkGray};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\ninterface SettingsLink {\n  route: SettingsRoutes;\n  name: string;\n}\nconst SETTINGS: SettingsLink[] = [\n  { route: SettingsRoutes.general, name: \"General\" },\n  { route: SettingsRoutes.network, name: \"Networks\" },\n  { route: SettingsRoutes.experimental, name: \"Experimental\" },\n  { route: SettingsRoutes.about, name: \"About\" },\n];\n\nconst SettingsIndex = () => {\n  const navigate = useNavigate();\n  return (\n    <>\n      <HomeButton />\n      <Body>\n        <H1>Account Settings</H1>\n        {SETTINGS.map((item) => (\n          <Item key={item.route} onClick={() => navigate(relative(item.route))}>\n            <span>{item.name}</span>\n            <ArrowForwardIcon />\n          </Item>\n        ))}\n      </Body>\n    </>\n  );\n};\n\nconst AboutSettings = () => {\n  return (\n    <>\n      <HomeButton path={AppRoute.settings} text=\"Back to Settings\" />\n      <Body>\n        <H1>About</H1>\n        <Text>\n          <img\n            src=\"ion-logo.svg\"\n            width=\"68\"\n            height=\"68\"\n            alt=\"OpenMask Logo\"\n          />\n        </Text>\n        <Text>OpenMask Beta version {packageJson.version}</Text>\n        <Text>Non-custodial web extension wallet for The Open Network</Text>\n        <Text>Links:</Text>\n        <TextLink\n          onClick={() => {\n            ExtensionPlatform.openTab({\n              url: `https://openmask.app/`,\n            });\n          }}\n        >\n          Visit our website <LinkIcon />\n        </TextLink>\n        <TextLink\n          onClick={() => {\n            ExtensionPlatform.openTab({\n              url: `https://t.me/openproduct`,\n            });\n          }}\n        >\n          Telegram <LinkIcon />\n        </TextLink>\n        <TextLink\n          onClick={() => {\n            ExtensionPlatform.openTab({\n              url: `https://github.com/OpenProduct`,\n            });\n          }}\n        >\n          GitHub <LinkIcon />\n        </TextLink>\n        <TextLink\n          onClick={() => {\n            ExtensionPlatform.openTab({\n              url: `${packageJson.repository}/issues`,\n            });\n          }}\n        >\n          Issue Tracker <LinkIcon />\n        </TextLink>\n      </Body>\n    </>\n  );\n};\n\nexport const Settings = () => {\n  return (\n    <Routes>\n      <Route path={SettingsRoutes.about} element={<AboutSettings />} />\n      <Route path={SettingsRoutes.general} element={<GeneralSettings />} />\n      <Route path={SettingsRoutes.network} element={<NetworkSettings />} />\n      <Route\n        path={SettingsRoutes.enableWebAuthn}\n        element={<WebAuthnEnableMigration />}\n      />\n      <Route\n        path={SettingsRoutes.disableWebAuthn}\n        element={<WebAuthnDisableMigration />}\n      />\n      <Route\n        path={SettingsRoutes.experimental}\n        element={<ExperimentalSettings />}\n      />\n      <Route path={SettingsRoutes.index} element={<SettingsIndex />} />\n    </Routes>\n  );\n};\n\nexport default Settings;\n"],"names":["SettingsRoutes","Quote","styled","WebAuthn","navigate","useNavigate","supported","useMemo","window","PublicKeyCredential","Logger","data","useAuthConfiguration","isEnabled","kind","onClick","disableWebAuthn","enableWebAuthn","disabled","ExperimentalSettings","HomeButton","path","AppRoute","text","H1","ProxyItems","PublicTonProxy","undefined","ProxySelect","useProxyConfiguration","proxy","isFetching","useUpdateProxyMutation","mutate","reset","isLoading","error","disableProxy","DropDown","isLeft","options","renderOption","value","host","port","onSelect","enabled","domains","ExtensionPlatform","url","message","LockScreenSelect","isLockScreen","useLockScreen","useSetLockScreen","type","checked","onChange","e","target","DataCollectionSelect","useDataCollection","useSetDataCollection","GeneralSettings","Row","props","theme","padding","darkGray","NetworkConfiguration","network","useNetworkMutation","name","useState","id","setId","rpcUrl","setRpsUrl","isCustom","apiKey","setApiKey","scanUrl","setScanUrl","rootDnsAddress","setRootDnsAddress","H3","InputField","label","onBlur","NetworkSettings","networks","useContext","NetworksContext","map","rpName","useChangePasswordMigration","client","useQueryClient","useMutation","oldPassword","password","confirm","configuration","Error","length","getNetworkConfig","Promise","all","getAccountState","account","QueryType","reEncryptWallets","accounts","encrypt","script","batchUpdate","Object","assign","fromEntries","batchUpdateStore","keys","key","invalidateQueries","WebAuthnDisableMigration","start","setStart","isDone","setDone","setOldPassword","setPassword","setConfirm","getWebAuthnPassword","authorizationAsync","mutateAsync","authorizationError","authorizationReset","isAuthorization","changeAsync","changeError","changeReset","isChanging","onStart","useCallback","onNext","onCancel","onLock","sendBackground","Fingerprint","Note","WebAuthnEnableMigration","total","setTotal","getAppPassword","pass","rpID","URL","browser","hostname","userHandle","crypto","credBlob","largeBlob","publicKey","challenge","rp","user","displayName","pubKeyCredParams","alg","authenticatorSelection","requireResidentKey","extensions","support","hmacCreateSecret","timeout","excludeCredentials","navigator","credentials","create","credential","getClientExtensionResults","response","toString","registrationAsync","registrationError","registrationReset","isRegistration","delay","transports","getTransports","allowCredentials","rawId","userVerification","write","Uint8Array","Buffer","from","get","assertion","written","largeBlobAsync","largeBlobError","largeBlobReset","isLargeBlob","credentialId","getCredBlob","read","result","blob","equals","verificationAsync","verificationError","verificationReset","isVerification","onRegistration","disabledCancel","Item","darkBlue","SETTINGS","route","general","experimental","about","SettingsIndex","item","relative","AboutSettings","src","width","height","alt","packageJson","Settings","element","index"],"sourceRoot":""}