{"version":3,"file":"static/js/338.5ae6852d.chunk.js","mappings":"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","sources":["view/screen/notifications/asset/api.ts","view/screen/notifications/asset/ImportJetton.tsx","view/screen/notifications/asset/ImportNft.tsx","view/screen/notifications/crypto/api.ts","view/screen/notifications/crypto/DecryptMessage.tsx","view/screen/notifications/crypto/EncryptMessage.tsx","view/screen/notifications/deploy/api.ts","view/screen/notifications/deploy/DeployContract.tsx","view/screen/notifications/ErrorBoundary.tsx","view/screen/notifications/send/api.ts","view/screen/notifications/send/SendTransaction.tsx","view/screen/notifications/sign/PersonalSign.tsx","view/screen/notifications/sign/api.ts","view/screen/notifications/sign/SignRaw.tsx","view/screen/notifications/switch/SwitchNetwork.tsx","view/screen/notifications/switch/api.ts","libs/service/transfer/ledgerService.ts","view/screen/notifications/tonConnect/api.ts","view/screen/notifications/tonConnect/Connect.tsx","view/screen/notifications/tonConnect/SendTransaction.tsx","view/screen/notifications/Notifications.tsx"],"sourcesContent":["import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Address } from \"@ton/core\";\nimport { useContext } from \"react\";\nimport {\n  JettonMinter,\n  JettonMinterContent,\n  JettonMinterData,\n} from \"ton-wrappers\";\nimport {\n  JettonAsset,\n  JettonParams,\n  JettonStateSchema,\n} from \"../../../../libs/entries/asset\";\nimport {\n  getWalletAssets,\n  setWalletAssets,\n} from \"../../../../libs/entries/wallet\";\nimport { seeIfJettonAsset } from \"../../../../libs/state/assetService\";\nimport { getJettonFullData } from \"../../../../libs/state/jettonService\";\nimport { QueryType } from \"../../../../libs/store/browserStore\";\nimport {\n  AccountStateContext,\n  NetworkContext,\n  TonClientContext,\n} from \"../../../context\";\nimport { askBackground, sendBackground } from \"../../../event\";\nimport { saveAccountState } from \"../../api\";\n\nexport const useOriginWallets = (origin: string) => {\n  return useQuery(\n    [QueryType.origin, origin],\n    async () => {\n      const wallets = await askBackground<string[] | null>().message(\n        \"getWallets\",\n        origin\n      );\n      if (wallets == null) {\n        throw new Error(\"Unexpected wallets\");\n      }\n      return wallets;\n    },\n    { enabled: !!origin }\n  );\n};\n\nconst getJettonName = async (data: JettonMinterData, params: JettonParams) => {\n  if (data.jettonContent) {\n    return await JettonStateSchema.validateAsync(data.jettonContent);\n  } else {\n    const state = {\n      symbol: params.symbol,\n      image: params.image,\n      name: params.name,\n      decimals: params.decimals,\n    };\n    return await JettonStateSchema.validateAsync(state);\n  }\n};\n\nexport interface JettonMinterState {\n  data: JettonMinterData;\n  state: JettonMinterContent;\n}\n\nexport const useJettonMinterData = (params: JettonParams) => {\n  const client = useContext(TonClientContext);\n  return useQuery<JettonMinterState, Error>(\n    [QueryType.jetton, params.address],\n    async () => {\n      const minter = client.open(\n        JettonMinter.createFromAddress(Address.parse(params.address))\n      );\n\n      const data = await minter.getJettonData();\n\n      const state = await getJettonName(data, params);\n\n      return { data, state };\n    }\n  );\n};\n\nexport const useJettonWalletBalance = (\n  id: number,\n  jettonMinterAddress: string,\n  walletAddress: string\n) => {\n  const client = useContext(TonClientContext);\n  return useQuery(\n    [QueryType.jetton, jettonMinterAddress, walletAddress, id],\n    async () => {\n      const { wallet } = await getJettonFullData(\n        client,\n        walletAddress,\n        jettonMinterAddress\n      );\n      return wallet;\n    }\n  );\n};\n\nexport interface AddJettonParams {\n  state: JettonAsset;\n  wallets: string[] | undefined;\n}\n\nexport const useAddJettonMutation = (id: number) => {\n  const network = useContext(NetworkContext);\n  const account = useContext(AccountStateContext);\n  const client = useQueryClient();\n\n  return useMutation<void, Error, AddJettonParams>(\n    async ({ state, wallets }) => {\n      if (!wallets) {\n        throw new Error(\"Unexpected set of wallets\");\n      }\n      const value = {\n        ...account,\n        wallets: account.wallets.map((wallet) => {\n          if (wallets.includes(wallet.address)) {\n            const assets = getWalletAssets(wallet);\n            if (\n              !assets.some(\n                (item) =>\n                  seeIfJettonAsset(item) &&\n                  item.minterAddress === state.minterAddress\n              )\n            ) {\n              // If not exists\n              assets.push(state);\n              return setWalletAssets(wallet, assets);\n            }\n          }\n          return wallet;\n        }),\n      };\n      await saveAccountState(network, client, value);\n      sendBackground.message(\"approveRequest\", { id, payload: undefined });\n    }\n  );\n};\n","import React, { FC, useCallback } from \"react\";\nimport { JettonMinterContent } from \"ton-wrappers\";\nimport { JettonParams } from \"../../../../libs/entries/asset\";\nimport { NotificationFields } from \"../../../../libs/event\";\nimport {\n  Body,\n  ButtonBottomRow,\n  ButtonNegative,\n  ButtonPositive,\n  Center,\n  ErrorMessage,\n  Gap,\n  H1,\n  Scroll,\n  Text,\n} from \"../../../components/Components\";\nimport { DAppBadge } from \"../../../components/DAppBadge\";\nimport { JettonRow } from \"../../../components/JettonRow\";\nimport { sendBackground } from \"../../../event\";\nimport { toShortAddress } from \"../../../utils\";\nimport { Loading, NotificationView } from \"../../Loading\";\nimport {\n  useAddJettonMutation,\n  useJettonMinterData,\n  useJettonWalletBalance,\n  useOriginWallets,\n} from \"./api\";\n\ninterface JettonWalletProps {\n  wallet: string;\n  id: number;\n  state: JettonMinterContent;\n  jettonMinterAddress: string;\n}\nconst JettonWallet: FC<JettonWalletProps> = React.memo(\n  ({ wallet, state, id, jettonMinterAddress }) => {\n    const { data: jettonBallance } = useJettonWalletBalance(\n      id,\n      jettonMinterAddress,\n      wallet\n    );\n    return (\n      <>\n        <Text>Wallet: {toShortAddress(wallet)}</Text>\n        <JettonRow state={state} balance={jettonBallance?.balance} />\n      </>\n    );\n  }\n);\n\nexport const ImportJetton: FC<\n  NotificationFields<\"importJetton\", JettonParams> & {\n    onClose: () => void;\n  }\n> = ({ id, logo, origin, data: params, onClose }) => {\n  const { data: wallets } = useOriginWallets(origin);\n\n  const { data, isFetching, error } = useJettonMinterData(params);\n\n  const { mutateAsync, isLoading, error: addError } = useAddJettonMutation(id);\n\n  const onAdd = async () => {\n    if (!data) return;\n    await mutateAsync({\n      wallets,\n      state: {\n        state: data.state,\n        minterAddress: params.address,\n      },\n    });\n    onClose();\n  };\n\n  const onBack = useCallback(() => {\n    sendBackground.message(\"rejectRequest\", id);\n    onClose();\n  }, [id]);\n\n  if (isFetching) {\n    return <Loading />;\n  }\n\n  if (!data || error || addError) {\n    return (\n      <NotificationView button=\"Close\" action={onBack}>\n        <ErrorMessage>\n          {error?.message || addError?.message || \"Jetton Data is not define\"}\n        </ErrorMessage>\n      </NotificationView>\n    );\n  }\n\n  return (\n    <Body>\n      <Center>\n        <DAppBadge logo={logo} origin={origin} />\n        <H1>Add Suggested Token</H1>\n        <Text>Would you like to import these jetton?</Text>\n        <Text>Jetton (Your wallet balance)</Text>\n      </Center>\n      <Scroll>\n        {(wallets ?? []).map((wallet) => (\n          <JettonWallet\n            wallet={wallet}\n            id={id}\n            state={data.state}\n            jettonMinterAddress={params.address}\n          />\n        ))}\n      </Scroll>\n      <Gap />\n      <ButtonBottomRow>\n        <ButtonNegative onClick={onBack} disabled={isLoading}>\n          Cancel\n        </ButtonNegative>\n        <ButtonPositive onClick={onAdd} disabled={isLoading}>\n          Add Jetton\n        </ButtonPositive>\n      </ButtonBottomRow>\n    </Body>\n  );\n};\n","import { Address, NftData } from \"@openproduct/web-sdk\";\nimport {\n  FC,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport {\n  NftCollectionState,\n  NftItemState,\n  NftParams,\n} from \"../../../../libs/entries/asset\";\nimport { NotificationFields } from \"../../../../libs/event\";\nimport {\n  Body,\n  ButtonNegative,\n  ButtonPositive,\n  ButtonRow,\n  Center,\n  ErrorMessage,\n  Gap,\n  H1,\n  Text,\n} from \"../../../components/Components\";\nimport { DAppBadge } from \"../../../components/DAppBadge\";\nimport { NftPayload } from \"../../../components/NftPayload\";\nimport { WalletStateContext } from \"../../../context\";\nimport { sendBackground } from \"../../../event\";\nimport {\n  useAddNftMutation,\n  useDomainNftMutation,\n  useNftCollectionDataMutation,\n  useNftContentMutation,\n  useNftDataMutation,\n} from \"../../home/wallet/assets/import/api\";\nimport { Loading, NotificationView } from \"../../Loading\";\n\nexport const ImportNft: FC<\n  NotificationFields<\"importNft\", NftParams> & {\n    onClose: () => void;\n  }\n> = ({ id, logo, origin, data: params, onClose }) => {\n  const wallet = useContext(WalletStateContext);\n\n  const [nftData, setNftData] = useState<NftData | null>(null);\n  const [nftState, setNftState] = useState<NftItemState | null>(null);\n  const [nftCollectionState, setNftCollectionState] =\n    useState<NftCollectionState | null>(null);\n\n  const { mutateAsync: nftDataAsync, isLoading: isDataLoading } =\n    useNftDataMutation();\n\n  const { mutateAsync: nftStateAsync, isLoading: isStateLoading } =\n    useNftContentMutation();\n\n  const {\n    mutateAsync: nftCollectionStateAsync,\n    isLoading: isCollectionLoading,\n  } = useNftCollectionDataMutation();\n\n  const {\n    mutateAsync: addNftAsync,\n    reset: resetAdd,\n    isLoading: isAddLoading,\n  } = useAddNftMutation();\n\n  const { mutateAsync: domainNftStateAsync, isLoading: isDomainLoading } =\n    useDomainNftMutation();\n\n  useEffect(() => {\n    (async () => {\n      const data = await nftDataAsync(params.address);\n      setNftData(data);\n\n      if (data.collectionAddress) {\n        const collection = await nftCollectionStateAsync(\n          data.collectionAddress\n        );\n        setNftCollectionState(collection);\n\n        const state = await domainNftStateAsync({\n          collection,\n          address: params.address,\n        });\n        if (state) setNftState(state);\n      }\n\n      const nftItemState = await nftStateAsync(data).catch(() => null);\n      if (nftItemState) setNftState(nftItemState);\n    })();\n  }, []);\n\n  const isLoading =\n    isDataLoading || isStateLoading || isCollectionLoading || isDomainLoading;\n\n  const isOwnNft = useMemo(() => {\n    if (!nftData) return false;\n\n    const walletAddress = new Address(wallet.address).toString(\n      true,\n      true,\n      true\n    );\n    const nftOwner = nftData.ownerAddress?.toString(true, true, true);\n    return walletAddress == nftOwner;\n  }, [wallet, nftData]);\n\n  const onAdd = async () => {\n    resetAdd();\n\n    if (!isOwnNft || !nftData) {\n      return;\n    }\n\n    await addNftAsync({\n      nftAddress: params.address,\n      nftData,\n      state: nftState,\n      collection: nftCollectionState,\n    });\n\n    sendBackground.message(\"approveRequest\", { id, payload: undefined });\n    onClose();\n  };\n\n  const onBack = useCallback(() => {\n    sendBackground.message(\"rejectRequest\", id);\n    onClose();\n  }, [id]);\n\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  if (nftData == null) {\n    return (\n      <NotificationView button=\"Close\" action={onBack}>\n        <ErrorMessage>NFT Data is not define</ErrorMessage>\n      </NotificationView>\n    );\n  }\n\n  return (\n    <Body>\n      <Center>\n        <DAppBadge logo={logo} origin={origin} />\n        <H1>Add Suggested NFT</H1>\n        <Text>Would you like to import these NFT?</Text>\n      </Center>\n\n      <NftPayload state={nftState} />\n\n      <Gap />\n      <ButtonRow>\n        <ButtonNegative onClick={onBack} disabled={isLoading}>\n          Cancel\n        </ButtonNegative>\n        <ButtonPositive\n          onClick={onAdd}\n          disabled={isLoading || isAddLoading || !isOwnNft}\n        >\n          {isOwnNft ? \"Add NFT\" : \"Another's NFT\"}\n        </ButtonPositive>\n      </ButtonRow>\n    </Body>\n  );\n};\n","import { getSharedSecret } from \"@noble/ed25519\";\nimport { base64ToBytes, bytesToHex, concatBytes } from \"@openproduct/web-sdk\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useContext } from \"react\";\nimport nacl, { randomBytes } from \"tweetnacl\";\nimport { decodeBase64, encodeBase64 } from \"tweetnacl-util\";\nimport {\n  DecryptMessageInputParams,\n  EncryptMessageInputParams,\n} from \"../../../../libs/entries/notificationMessage\";\nimport { TonProviderContext, WalletStateContext } from \"../../../context\";\nimport { findContract } from \"../../../utils\";\nimport { getWalletKeyPair } from \"../../api\";\nimport {QueryType} from \"../../../../libs/store/browserStore\";\n\nexport const useGetAddress = (publicKey: string | undefined) => {\n  const ton = useContext(TonProviderContext);\n  const wallet = useContext(WalletStateContext);\n\n  return useQuery<string>([publicKey, QueryType.publicKey], async () => {\n    if (!publicKey) {\n      return wallet.address;\n    }\n    const [_, address] = await findContract(ton, base64ToBytes(publicKey));\n\n    return address.toString(true, true, true);\n  });\n};\n\nexport const useEncryptMutation = () => {\n  const wallet = useContext(WalletStateContext);\n\n  return useMutation<string, Error, EncryptMessageInputParams>(\n    async (options) => {\n      if (!options?.message) {\n        throw new Error(\"Missing encrypt message\");\n      }\n\n      const keyPair = await getWalletKeyPair(wallet);\n      const nonce = randomBytes(nacl.box.nonceLength);\n\n      const messageAsBytes = base64ToBytes(options.message);\n      const receiverPublicKey = options.receiverPublicKey\n        ? base64ToBytes(options.receiverPublicKey)\n        : keyPair.publicKey;\n      const sharedKey = await getSharedSecret(\n        bytesToHex(keyPair.secretKey.slice(0, 32)),\n        bytesToHex(receiverPublicKey)\n      );\n\n      const encrypted = nacl.box.after(messageAsBytes, nonce, sharedKey);\n\n      if (!encrypted) {\n        throw new Error(\"Encryption error\");\n      }\n\n      return encodeBase64(concatBytes(nonce, encrypted));\n    }\n  );\n};\n\nexport const useDecryptMutation = () => {\n  const wallet = useContext(WalletStateContext);\n\n  return useMutation<string, Error, DecryptMessageInputParams>(\n    async (options) => {\n      if (!options.message) {\n        throw new Error(\"Missing decrypt message\");\n      }\n      const keyPair = await getWalletKeyPair(wallet);\n\n      const messageWithNonceAsUint8Array = decodeBase64(options.message);\n      const nonce = messageWithNonceAsUint8Array.slice(0, nacl.box.nonceLength);\n\n      const message = messageWithNonceAsUint8Array.slice(\n        nacl.box.nonceLength,\n        messageWithNonceAsUint8Array.length\n      );\n\n      const senderPublicKey = options.senderPublicKey\n        ? base64ToBytes(options.senderPublicKey)\n        : keyPair.publicKey;\n      const sharedKey = await getSharedSecret(\n        bytesToHex(keyPair.secretKey.slice(0, 32)),\n        bytesToHex(senderPublicKey)\n      );\n\n      const decrypted = nacl.box.open.after(message, nonce, sharedKey);\n\n      if (!decrypted) {\n        throw new Error(\"Decryption error\");\n      }\n\n      return encodeBase64(decrypted);\n    }\n  );\n};\n","import { FC, useCallback } from \"react\";\nimport { DecryptMessageInputParams } from \"../../../../libs/entries/notificationMessage\";\nimport { NotificationFields } from \"../../../../libs/event\";\nimport { AddressBlock } from \"../../../components/AddressBlock\";\nimport {\n  Body,\n  ButtonNegative,\n  ButtonPositive,\n  ButtonRow,\n  Center,\n  Gap,\n  H1,\n  Text,\n} from \"../../../components/Components\";\nimport { DAppBadge } from \"../../../components/DAppBadge\";\nimport { FingerprintIcon } from \"../../../components/Icons\";\nimport { sendBackground } from \"../../../event\";\nimport { useAuthConfiguration } from \"../../settings/api\";\nimport { useDecryptMutation, useGetAddress } from \"./api\";\n\nexport const DecryptMessage: FC<\n  NotificationFields<\"decryptMessage\", DecryptMessageInputParams> & {\n    onClose: () => void;\n  }\n> = ({ id, logo, origin, data, onClose }) => {\n  const onBack = useCallback(() => {\n    sendBackground.message(\"rejectRequest\", id);\n    onClose();\n  }, [id]);\n\n  const { isLoading, mutateAsync } = useDecryptMutation();\n  const { isLoading: loadingSender, data: senderAddress } = useGetAddress(\n    data.senderPublicKey\n  );\n\n  const { data: auth } = useAuthConfiguration();\n  const isWebAuth = auth?.kind == \"webauthn\";\n\n  const onDecrypt = async () => {\n    const decryptedMessage = await mutateAsync({\n      message: data.message,\n      senderPublicKey: data.senderPublicKey,\n    });\n    sendBackground.message(\"approveRequest\", { id, payload: decryptedMessage });\n    onClose();\n  };\n\n  return (\n    <Body>\n      <Center>\n        <DAppBadge logo={logo} origin={origin} />\n        <H1>Decrypt message</H1>\n        <Text>Would you like to decrypt message?</Text>\n      </Center>\n\n      <AddressBlock label=\"Sender\" address={senderAddress} />\n\n      <Gap />\n      <ButtonRow>\n        <ButtonNegative onClick={onBack} disabled={isLoading}>\n          Cancel\n        </ButtonNegative>\n        <ButtonPositive\n          onClick={onDecrypt}\n          disabled={isLoading || loadingSender}\n        >\n          Decrypt {isWebAuth && <FingerprintIcon />}\n        </ButtonPositive>\n      </ButtonRow>\n    </Body>\n  );\n};\n","import { FC, useCallback } from \"react\";\nimport { EncryptMessageInputParams } from \"../../../../libs/entries/notificationMessage\";\nimport { NotificationFields } from \"../../../../libs/event\";\nimport { AddressBlock } from \"../../../components/AddressBlock\";\nimport {\n  Body,\n  ButtonNegative,\n  ButtonPositive,\n  ButtonRow,\n  Center,\n  Gap,\n  H1,\n  Text,\n} from \"../../../components/Components\";\nimport { DAppBadge } from \"../../../components/DAppBadge\";\nimport { FingerprintIcon } from \"../../../components/Icons\";\nimport { sendBackground } from \"../../../event\";\nimport { useAuthConfiguration } from \"../../settings/api\";\nimport { useEncryptMutation, useGetAddress } from \"./api\";\n\nexport const EncryptMessage: FC<\n  NotificationFields<\"encryptMessage\", EncryptMessageInputParams> & {\n    onClose: () => void;\n  }\n> = ({ id, logo, origin, data, onClose }) => {\n  const onBack = useCallback(() => {\n    sendBackground.message(\"rejectRequest\", id);\n    onClose();\n  }, [id]);\n\n  const { isLoading, mutateAsync } = useEncryptMutation();\n  const { isLoading: loadingReceiver, data: receiverAddress } = useGetAddress(\n    data.receiverPublicKey\n  );\n\n  const { data: auth } = useAuthConfiguration();\n  const isWebAuth = auth?.kind == \"webauthn\";\n\n  const onEncrypt = async () => {\n    const decryptedMessage = await mutateAsync({\n      message: data.message,\n      receiverPublicKey: data.receiverPublicKey,\n    });\n    sendBackground.message(\"approveRequest\", { id, payload: decryptedMessage });\n    onClose();\n  };\n\n  return (\n    <Body>\n      <Center>\n        <DAppBadge logo={logo} origin={origin} />\n        <H1>Encrypt message</H1>\n        <Text>Would you like to encrypt data?</Text>\n      </Center>\n\n      <AddressBlock label=\"Receiver\" address={receiverAddress} />\n\n      <Gap />\n\n      <ButtonRow>\n        <ButtonNegative onClick={onBack} disabled={isLoading}>\n          Cancel\n        </ButtonNegative>\n        <ButtonPositive\n          onClick={onEncrypt}\n          disabled={isLoading || loadingReceiver}\n        >\n          Encrypt {isWebAuth && <FingerprintIcon />}\n        </ButtonPositive>\n      </ButtonRow>\n    </Body>\n  );\n};\n","import { EstimateFeeValues } from \"@openproduct/web-sdk\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Address, Cell, fromNano } from \"@ton/core\";\nimport { TonClient } from \"@ton/ton\";\nimport { useContext } from \"react\";\nimport { DeployInputParams } from \"../../../../libs/entries/notificationMessage\";\nimport { WalletState } from \"../../../../libs/entries/wallet\";\nimport {\n  getContractAddress,\n  getWalletContract,\n} from \"../../../../libs/service/transfer/core\";\nimport { validateAddressRestrictions } from \"../../../../libs/service/transfer/restrictionService\";\nimport {\n  createLedgerTonTransfer,\n  createTonTransfer,\n} from \"../../../../libs/service/transfer/tonService\";\nimport { QueryType } from \"../../../../libs/store/browserStore\";\nimport { TonClientContext, WalletStateContext } from \"../../../context\";\nimport { checkBalanceOrDie2, getWalletKeyPair } from \"../../api\";\nimport { signLedgerTransaction } from \"../../ledger/api\";\n\ninterface DeployState {\n  workchain: number;\n  initialData: Cell;\n  initialCode: Cell;\n  initialMessage?: Cell;\n  address: string;\n  amount: string;\n}\n\nexport const toDeployState = (\n  params: DeployInputParams,\n  network: string\n): DeployState => {\n  const { initDataCell, initCodeCell, workchain, amount, initMessageCell } =\n    params;\n\n  const [initialData] = Cell.fromBoc(Buffer.from(initDataCell, \"hex\"));\n  const [initialCode] = Cell.fromBoc(Buffer.from(initCodeCell, \"hex\"));\n\n  const address = getContractAddress({\n    workchain: workchain ?? 0,\n    data: initialData,\n    code: initialCode,\n  });\n\n  return {\n    workchain: workchain ?? 0,\n    initialData,\n    initialCode,\n    address: address.toString({ testOnly: network === \"testnet\" }),\n    amount: amount,\n    initialMessage: initMessageCell\n      ? Cell.fromBoc(Buffer.from(initMessageCell, \"hex\"))[0]\n      : undefined,\n  };\n};\n\nexport const useEstimateDeploy = (state: DeployState) => {\n  const tonClient = useContext(TonClientContext);\n  const wallet = useContext(WalletStateContext);\n\n  return useQuery([QueryType.estimation, state], async () => {\n    const { address, initialCode, initialData, initialMessage, amount } = state;\n    const transaction = createTonTransfer(\n      0,\n      wallet,\n      address,\n      { amount: fromNano(amount) },\n      initialMessage,\n      { code: initialCode, data: initialData }\n    );\n\n    const data = await tonClient.estimateExternalMessageFee(\n      Address.parse(wallet.address),\n      {\n        body: transaction,\n        initCode: null,\n        initData: null,\n        ignoreSignature: true,\n      }\n    );\n    return data.source_fees as EstimateFeeValues;\n  });\n};\n\nconst sendLedgerDeploy = async (\n  tonClient: TonClient,\n  wallet: WalletState,\n  state: DeployState\n) => {\n  const contract = getWalletContract(wallet);\n  const tonContract = tonClient.open(contract);\n\n  const balance = await tonContract.getBalance();\n\n  const { address, initialCode, initialData, initialMessage, amount } = state;\n  checkBalanceOrDie2(balance.toString(), state.amount);\n\n  const seqno = await tonContract.getSeqno();\n\n  const transaction = createLedgerTonTransfer(\n    wallet,\n    seqno,\n    address,\n    { amount: fromNano(amount) },\n    initialMessage\n  );\n\n  const signed = await signLedgerTransaction(transaction);\n  await tonContract.send(signed);\n\n  return seqno;\n};\n\nconst sendMnemonicDeploy = async (\n  tonClient: TonClient,\n  wallet: WalletState,\n  state: DeployState\n) => {\n  await validateAddressRestrictions(state.address);\n  const keyPair = await getWalletKeyPair(wallet);\n\n  const secretKey = Buffer.from(keyPair.secretKey);\n\n  const contract = getWalletContract(wallet);\n  const tonContract = tonClient.open(contract);\n\n  const balance = await tonContract.getBalance();\n\n  const { address, initialCode, initialData, initialMessage, amount } = state;\n  checkBalanceOrDie2(balance.toString(), amount);\n\n  const seqno = await tonContract.getSeqno();\n\n  const transaction = createTonTransfer(\n    seqno,\n    wallet,\n    address,\n    { amount: fromNano(amount) },\n    initialMessage,\n    { code: initialCode, data: initialData },\n    secretKey\n  );\n\n  await tonContract.send(transaction);\n  return seqno;\n};\n\nexport const useSendDeploy = (state: DeployState) => {\n  const tonClient = useContext(TonClientContext);\n  const wallet = useContext(WalletStateContext);\n\n  return useMutation<number, Error>(() => {\n    if (wallet.ledger) {\n      return sendLedgerDeploy(tonClient, wallet, state);\n    } else {\n      return sendMnemonicDeploy(tonClient, wallet, state);\n    }\n  });\n};\n","import { fromNano } from \"@openproduct/web-sdk\";\nimport { FC, useContext, useMemo } from \"react\";\nimport {\n  DeployInputParams,\n  DeployOutputParams,\n} from \"../../../../libs/entries/notificationMessage\";\nimport { NotificationFields } from \"../../../../libs/event\";\nimport { AddressTransfer } from \"../../../components/Address\";\nimport { CodeBlock } from \"../../../components/CodeBlock\";\nimport {\n  Body,\n  ButtonNegative,\n  ButtonPositive,\n  ButtonRow,\n  Center,\n  ErrorMessage,\n  Gap,\n  H1,\n  Text,\n  TextLine,\n} from \"../../../components/Components\";\nimport { DAppBadge } from \"../../../components/DAppBadge\";\nimport { Dots } from \"../../../components/Dots\";\nimport { Fees } from \"../../../components/send/Fees\";\nimport { NetworkContext, WalletStateContext } from \"../../../context\";\nimport { sendBackground } from \"../../../event\";\nimport { FingerprintLabel } from \"../../../FingerprintLabel\";\nimport { toDeployState, useEstimateDeploy, useSendDeploy } from \"./api\";\n\nexport const DeployContract: FC<\n  NotificationFields<\"deploy\", DeployInputParams> & { onClose: () => void }\n> = ({ id, logo, origin, data, onClose }) => {\n  const wallet = useContext(WalletStateContext);\n  const network = useContext(NetworkContext);\n\n  const state = useMemo(() => toDeployState(data, network), [data, network]);\n  const { data: estimation } = useEstimateDeploy(state);\n\n  const {\n    mutateAsync,\n    isLoading: isDeploying,\n    error: deployError,\n  } = useSendDeploy(state);\n\n  const onBack = () => {\n    sendBackground.message(\"rejectRequest\", id);\n    onClose();\n  };\n\n  const onDeploy = async () => {\n    const seqno = await mutateAsync();\n\n    const payload: DeployOutputParams = {\n      walletSeqNo: seqno,\n      newContractAddress: state.address.toString(),\n    };\n\n    sendBackground.message(\"approveRequest\", {\n      id,\n      payload,\n    });\n    onClose();\n  };\n\n  const loading = isDeploying;\n\n  return (\n    <Body>\n      <Center>\n        <DAppBadge logo={logo} origin={origin} />\n        <H1>Deploy Smart Contract</H1>\n        <Text>Would you like to deploy contract?</Text>\n      </Center>\n\n      <AddressTransfer left={wallet.name} right={state.address.toString()} />\n\n      <TextLine>Forward amount:</TextLine>\n      <TextLine>\n        <b>{fromNano(data.amount)} ION</b>\n      </TextLine>\n\n      <Fees estimation={estimation} />\n\n      <CodeBlock label=\"Initial Code\">{data.initCodeCell}</CodeBlock>\n      <CodeBlock label=\"Initial Data\">{data.initDataCell}</CodeBlock>\n\n      {data.initMessageCell && (\n        <CodeBlock label=\"Initial Message\">{data.initMessageCell}</CodeBlock>\n      )}\n\n      {deployError && <ErrorMessage>{deployError.message}</ErrorMessage>}\n\n      <Gap />\n      <ButtonRow>\n        <ButtonNegative onClick={onBack} disabled={loading}>\n          Cancel\n        </ButtonNegative>\n        <ButtonPositive\n          onClick={onDeploy}\n          disabled={loading || deployError != null}\n        >\n          {isDeploying ? (\n            <Dots>Deploying</Dots>\n          ) : (\n            <FingerprintLabel>Deploy</FingerprintLabel>\n          )}\n        </ButtonPositive>\n      </ButtonRow>\n    </Body>\n  );\n};\n","import { Component, ErrorInfo, ReactNode } from \"react\";\nimport { ErrorMessage } from \"../../components/Components\";\nimport { NotificationView } from \"../Loading\";\n\ninterface Props {\n  onClose: () => void;\n  children?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false,\n  };\n\n  public static getDerivedStateFromError(error: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true, error };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error(\"Uncaught error:\", error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return (\n        <NotificationView action={this.props.onClose} button=\"Cancel\">\n          {this.state.error && (\n            <ErrorMessage>{this.state.error.message}</ErrorMessage>\n          )}\n        </NotificationView>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { beginCell, Cell, fromNano } from \"@ton/core\";\nimport { TransactionParams } from \"../../../../libs/entries/transaction\";\nimport { TransactionState } from \"../../../../libs/service/transfer/tonService\";\nimport { QueryType } from \"../../../../libs/store/browserStore\";\n\nconst toData = (params: TransactionParams) => {\n  if (!params.data) return undefined;\n\n  switch (params.dataType) {\n    case \"hex\":\n      return Cell.fromBoc(Buffer.from(params.data, \"hex\"))[0];\n    case \"base64\":\n      return beginCell()\n        .storeBuffer(Buffer.from(params.data, \"base64\"))\n        .endCell();\n    case \"boc\":\n      return Cell.fromBase64(params.data);\n    default:\n      return params.data;\n  }\n};\n\nexport const useSendTransactionState = (params: TransactionParams) => {\n  return useQuery<TransactionState, Error>(\n    [QueryType.transactions, params],\n    () => {\n      return {\n        address: params.to,\n        amount: fromNano(params.value),\n        max: \"0\",\n        data: toData(params),\n        hex: params.data,\n      };\n    }\n  );\n};\n","import { FC, useContext } from \"react\";\nimport { TransactionParams } from \"../../../../libs/entries/transaction\";\nimport { NotificationFields } from \"../../../../libs/event\";\nimport { AddressTransfer } from \"../../../components/Address\";\nimport { CodeBlock } from \"../../../components/CodeBlock\";\nimport {\n  Body,\n  ButtonNegative,\n  ButtonPositive,\n  ButtonRow,\n  Center,\n  ErrorMessage,\n  Gap,\n  H1,\n  Text,\n  TextLine,\n} from \"../../../components/Components\";\nimport { DAppBadge } from \"../../../components/DAppBadge\";\nimport { Dots } from \"../../../components/Dots\";\nimport { Fees } from \"../../../components/send/Fees\";\nimport { WalletStateContext } from \"../../../context\";\nimport { sendBackground } from \"../../../event\";\nimport { FingerprintLabel } from \"../../../FingerprintLabel\";\nimport {\n  useEstimateTransaction,\n  useSendTransaction,\n  useTargetAddress,\n} from \"../../home/wallet/send/api\";\nimport { Loading } from \"../../Loading\";\nimport { useSendTransactionState } from \"./api\";\n\nexport const SendTransaction: FC<\n  NotificationFields<\"sendTransaction\", TransactionParams> & {\n    onClose: () => void;\n  }\n> = ({ id, logo, origin, data, onClose }) => {\n  const wallet = useContext(WalletStateContext);\n\n  const { data: state, isFetching: isPreValidating } =\n    useSendTransactionState(data);\n\n  const {\n    data: address,\n    error: addressError,\n    isFetching: isAddressFetching,\n  } = useTargetAddress(data.to);\n\n  const {\n    mutateAsync,\n    error: sendError,\n    isLoading: isSending,\n  } = useSendTransaction();\n\n  const { data: estimation } = useEstimateTransaction(state, address);\n\n  const isValidating = isPreValidating || isAddressFetching;\n\n  const onBack = () => {\n    sendBackground.message(\"rejectRequest\", id);\n    onClose();\n  };\n\n  const onConfirm = async () => {\n    if (!address || !state) return;\n    const seqNo = await mutateAsync({ address, state });\n\n    sendBackground.message(\"approveRequest\", {\n      id,\n      payload: seqNo,\n    });\n\n    onClose();\n  };\n\n  if (!state) {\n    return <Loading />;\n  }\n\n  const loading = isValidating || isSending;\n\n  const disabledCancel = loading && addressError == null && sendError == null;\n  const disabledConfig = loading || addressError != null || sendError != null;\n\n  return (\n    <Body>\n      <Center>\n        <DAppBadge logo={logo} origin={origin} />\n        <H1>Send Transaction</H1>\n        <Text>Would you like to send transaction?</Text>\n      </Center>\n\n      <AddressTransfer left={wallet.name} right={data.to} />\n      <TextLine>SENDING: ({origin})</TextLine>\n      <TextLine>\n        <b>{state.amount} ION</b>\n      </TextLine>\n\n      <Fees estimation={estimation} />\n\n      {state.hex && <CodeBlock label=\"Payload\">{state.hex}</CodeBlock>}\n\n      {addressError && <ErrorMessage>{addressError.message}</ErrorMessage>}\n      {sendError && <ErrorMessage>{sendError.message}</ErrorMessage>}\n\n      <Gap />\n\n      <ButtonRow>\n        <ButtonNegative onClick={onBack} disabled={disabledCancel}>\n          Cancel\n        </ButtonNegative>\n        <ButtonPositive onClick={onConfirm} disabled={disabledConfig}>\n          {isValidating ? (\n            <Dots>Validating</Dots>\n          ) : isSending ? (\n            <Dots>Sending</Dots>\n          ) : (\n            <FingerprintLabel>Confirm</FingerprintLabel>\n          )}\n        </ButtonPositive>\n      </ButtonRow>\n    </Body>\n  );\n};\n","import { FC, useCallback } from \"react\";\nimport { RawSignInputParams } from \"../../../../libs/entries/notificationMessage\";\nimport { NotificationFields } from \"../../../../libs/event\";\nimport { CodeBlock } from \"../../../components/CodeBlock\";\nimport {\n  Body,\n  ButtonNegative,\n  ButtonPositive,\n  ButtonRow,\n  Center,\n  ErrorMessage,\n  Gap,\n  H1,\n  Text,\n} from \"../../../components/Components\";\nimport { DAppBadge } from \"../../../components/DAppBadge\";\nimport { sendBackground } from \"../../../event\";\nimport { usePersonalSignMutation } from \"./api\";\n\nexport const SignPersonal: FC<\n  NotificationFields<\"personalSign\", RawSignInputParams> & {\n    onClose: () => void;\n  }\n> = ({ id, logo, origin, data, onClose }) => {\n  const {\n    mutateAsync,\n    isLoading,\n    error: rawSignError,\n  } = usePersonalSignMutation();\n\n  const onBack = useCallback(() => {\n    sendBackground.message(\"rejectRequest\", id);\n    onClose();\n  }, [id]);\n\n  const onSign = async () => {\n    const signature = await mutateAsync(data.data);\n    sendBackground.message(\"approveRequest\", { id, payload: signature });\n    onClose();\n  };\n\n  return (\n    <Body>\n      <Center>\n        <DAppBadge logo={logo} origin={origin} />\n        <H1>Personal Sign</H1>\n        <Text>Would you like to sign data?</Text>\n      </Center>\n\n      <CodeBlock label=\"Message\">{data.data}</CodeBlock>\n\n      {rawSignError && <ErrorMessage>{rawSignError.message}</ErrorMessage>}\n\n      <Gap />\n      <ButtonRow>\n        <ButtonNegative onClick={onBack} disabled={isLoading}>\n          Cancel\n        </ButtonNegative>\n        <ButtonPositive onClick={onSign} disabled={isLoading}>\n          Sign\n        </ButtonPositive>\n      </ButtonRow>\n    </Body>\n  );\n};\n","import { bytesToHex, hexToBytes } from \"@openproduct/web-sdk\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useContext } from \"react\";\nimport nacl from \"tweetnacl\";\nimport { WalletStateContext } from \"../../../context\";\nimport { getWalletKeyPair } from \"../../api\";\n\nexport const useSignMutation = () => {\n  const wallet = useContext(WalletStateContext);\n\n  return useMutation<string, Error, string | undefined>(async (hex) => {\n    if (!hex) {\n      throw new Error(\"Missing sign data\");\n    }\n    const keyPair = await getWalletKeyPair(wallet);\n    const signature = nacl.sign.detached(hexToBytes(hex), keyPair.secretKey);\n    return bytesToHex(signature);\n  });\n};\n\nexport const usePersonalSignMutation = () => {\n  const wallet = useContext(WalletStateContext);\n\n  return useMutation<string, Error, string | undefined>(async (value) => {\n    if (!value) {\n      throw new Error(\"Missing sign data\");\n    }\n\n    const valueHash = nacl.hash(Buffer.from(value, \"utf8\"));\n    /**\n     * According: https://github.com/ton-foundation/specs/blob/main/specs/wtf-0002.md\n     */\n\n    if (valueHash.length + \"ton-safe-sign-magic\".length >= 127) {\n      throw new Error(\"Too large personal message\");\n    }\n\n    const hex = Buffer.concat([\n      Buffer.from([0xff, 0xff]),\n      Buffer.from(\"ton-safe-sign-magic\"),\n      valueHash,\n    ]).toString(\"hex\");\n\n    const keyPair = await getWalletKeyPair(wallet);\n    const signature = nacl.sign.detached(hexToBytes(hex), keyPair.secretKey);\n    return bytesToHex(signature);\n  });\n};\n","import { FC, useCallback } from \"react\";\nimport { RawSignInputParams } from \"../../../../libs/entries/notificationMessage\";\nimport { NotificationFields } from \"../../../../libs/event\";\nimport ExtensionPlatform from \"../../../../libs/service/extension\";\nimport { CodeBlock } from \"../../../components/CodeBlock\";\nimport {\n  Body,\n  ButtonNegative,\n  ButtonPositive,\n  ButtonRow,\n  Center,\n  ErrorMessage,\n  Gap,\n  H1,\n  InlineLink,\n  Text,\n  WarningMessage,\n} from \"../../../components/Components\";\nimport { DAppBadge } from \"../../../components/DAppBadge\";\nimport { LinkIcon } from \"../../../components/Icons\";\nimport { sendBackground } from \"../../../event\";\nimport { useSignMutation } from \"./api\";\n\nconst onLink = () =>\n  ExtensionPlatform.openTab({\n    url: \"https://consensys.net/blog/metamask/the-seal-of-approval-know-what-youre-consenting-to-with-permissions-and-approvals-in-metamask/\",\n  });\n\nexport const SignRaw: FC<\n  NotificationFields<\"rawSign\", RawSignInputParams> & { onClose: () => void }\n> = ({ id, logo, origin, data, onClose }) => {\n  const { mutateAsync, isLoading, error: rawSignError } = useSignMutation();\n\n  const onBack = useCallback(() => {\n    sendBackground.message(\"rejectRequest\", id);\n    onClose();\n  }, [id]);\n\n  const onSign = async () => {\n    const signature = await mutateAsync(data.data);\n    sendBackground.message(\"approveRequest\", { id, payload: signature });\n    onClose();\n  };\n\n  return (\n    <Body>\n      <Center>\n        <DAppBadge logo={logo} origin={origin} />\n        <H1>Raw Sign</H1>\n        <Text>Would you like to sign raw data?</Text>\n      </Center>\n\n      <WarningMessage>\n        Signing this message can be dangerous.\n        <br />\n        <br /> This signature could potentially perform any operation on your\n        account's behalf, including granting complete control of your account\n        and all of its assets to the requesting site. Only sign this message if\n        you know what you're doing or completely trust the requesting site.{\" \"}\n        <InlineLink onClick={onLink}>\n          Learn more <LinkIcon />\n        </InlineLink>\n      </WarningMessage>\n\n      <CodeBlock label=\"Message\">{data.data}</CodeBlock>\n\n      {rawSignError && <ErrorMessage>{rawSignError.message}</ErrorMessage>}\n\n      <Gap />\n      <ButtonRow>\n        <ButtonNegative onClick={onBack} disabled={isLoading}>\n          Cancel\n        </ButtonNegative>\n        <ButtonPositive onClick={onSign} disabled={isLoading}>\n          Sign\n        </ButtonPositive>\n      </ButtonRow>\n    </Body>\n  );\n};\n","import { FC, useContext } from \"react\";\nimport { SwitchNetworkParams } from \"../../../../libs/entries/notificationMessage\";\nimport { NotificationFields } from \"../../../../libs/event\";\nimport { AddressTransfer } from \"../../../components/Address\";\nimport {\n  Body,\n  ButtonBottomRow,\n  ButtonNegative,\n  ButtonPositive,\n  Center,\n  Gap,\n  H1,\n  Text,\n} from \"../../../components/Components\";\nimport { DAppBadge } from \"../../../components/DAppBadge\";\nimport { NetworkContext } from \"../../../context\";\nimport { sendBackground } from \"../../../event\";\nimport { useSwitchNetworkMutation } from \"./api\";\n\nexport const SwitchNetwork: FC<\n  NotificationFields<\"switchNetwork\", SwitchNetworkParams> & {\n    onClose: () => void;\n  }\n> = ({ id, logo, origin, data: { network }, onClose }) => {\n  const current = useContext(NetworkContext);\n\n  const { mutateAsync, isLoading } = useSwitchNetworkMutation();\n  const onCancel = () => {\n    sendBackground.message(\"rejectRequest\", id);\n    onClose();\n  };\n\n  const onSwitch = async () => {\n    await mutateAsync({ id, network });\n    onClose();\n  };\n\n  return (\n    <Body>\n      <Center>\n        <DAppBadge logo={logo} origin={origin} />\n        <H1>Switch wallet network</H1>\n        <Text>Allow this site to switch the network?</Text>\n        <Text>This will switch the OpenMask network:</Text>\n      </Center>\n      <AddressTransfer left={current} right={network} />\n      <Gap />\n      <ButtonBottomRow>\n        <ButtonNegative onClick={onCancel} disabled={isLoading}>\n          Cancel\n        </ButtonNegative>\n        <ButtonPositive onClick={onSwitch} disabled={isLoading}>\n          Switch\n        </ButtonPositive>\n      </ButtonBottomRow>\n    </Body>\n  );\n};\n","import { useMutation } from \"@tanstack/react-query\";\nimport { QueryType, setStoreValue } from \"../../../../libs/store/browserStore\";\nimport { sendBackground } from \"../../../event\";\n\ninterface Params {\n  network: string;\n  id: number;\n}\nexport const useSwitchNetworkMutation = () => {\n  return useMutation<void, Error, Params>(async ({ id, network }) => {\n    await setStoreValue(QueryType.network, network);\n\n    sendBackground.message(\"chainChanged\", network);\n    sendBackground.message(\"approveRequest\", { id, payload: undefined });\n  });\n};\n","import { Address, Cell, fromNano } from \"@ton/core\";\nimport { TonConnectTransactionPayloadMessage } from \"../../entries/notificationMessage\";\nimport { WalletState } from \"../../entries/wallet\";\nimport { getWalletContract } from \"./core\";\nimport {\n  JettonTransferOpCode,\n  createLedgerJettonTransferPayload,\n  parseJettonTransfer,\n} from \"./jettonService\";\nimport { LedgerTransfer } from \"./ledger\";\nimport {\n  NftTransferOpCode,\n  createLedgerNftTransferPayload,\n  parseNftTransfer,\n} from \"./nftService\";\nimport { createLedgerTonTransfer } from \"./tonService\";\n\nexport const parseLedgerTransaction = (\n  wallet: WalletState,\n  seqno: number,\n  item: TonConnectTransactionPayloadMessage\n): LedgerTransfer => {\n  const data = item.payload ? Cell.fromBase64(item.payload) : undefined;\n\n  if (!data) {\n    return createLedgerTonTransfer(\n      wallet,\n      seqno,\n      item.address,\n      {\n        amount: fromNano(item.amount),\n      },\n      data\n    );\n  }\n\n  const walletContract = getWalletContract(wallet);\n\n  const operation = data.asSlice().loadUint(32);\n  switch (operation) {\n    case NftTransferOpCode: {\n      const transfer = parseNftTransfer(data);\n      return createLedgerNftTransferPayload(\n        item.address,\n        BigInt(item.amount),\n        seqno,\n        walletContract.init,\n        transfer\n      );\n    }\n    case JettonTransferOpCode: {\n      const transfer = parseJettonTransfer(data);\n      return createLedgerJettonTransferPayload(\n        Address.parse(item.address),\n        BigInt(item.amount),\n        seqno,\n        walletContract.init,\n        transfer\n      );\n    }\n\n    default:\n      throw new Error(\"App Ledger 2.0 is not support custom transaction\");\n  }\n};\n","import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport {\n  Address,\n  beginCell,\n  external,\n  storeMessage,\n  storeStateInit,\n} from \"@ton/core\";\nimport { sha256_sync } from \"@ton/crypto\";\nimport BigNumber from \"bignumber.js\";\nimport { useContext } from \"react\";\nimport nacl from \"tweetnacl\";\nimport { selectNetworkConfig } from \"../../../../libs/entries/network\";\nimport {\n  TonAddressItemReply,\n  TonConnectItemReply,\n  TonConnectRequest,\n  TonConnectTransactionPayload,\n  TonConnectTransactionPayloadMessage,\n  TonProofItemReplySuccess,\n} from \"../../../../libs/entries/notificationMessage\";\nimport { Permission } from \"../../../../libs/entries/permission\";\nimport { EstimateFeeValues } from \"../../../../libs/entries/tonCenter\";\nimport { WalletState } from \"../../../../libs/entries/wallet\";\nimport { getWalletContract } from \"../../../../libs/service/transfer/core\";\nimport { parseLedgerTransaction } from \"../../../../libs/service/transfer/ledgerService\";\nimport { validateTonConnectRestrictions } from \"../../../../libs/service/transfer/restrictionService\";\nimport { createTonConnectTransfer } from \"../../../../libs/service/transfer/tonService\";\nimport { addDAppAccess } from \"../../../../libs/state/connectionSerivce\";\nimport {\n  QueryType,\n  getConnections,\n  setConnections,\n} from \"../../../../libs/store/browserStore\";\nimport {\n  AccountStateContext,\n  NetworkContext,\n  NetworksContext,\n  TonClientContext,\n  WalletStateContext,\n} from \"../../../context\";\nimport { sendBackground } from \"../../../event\";\nimport { checkBalanceOrDie2, getWalletKeyPair } from \"../../api\";\nimport { signLedgerTransaction } from \"../../ledger/api\";\n\ninterface ConnectParams {\n  origin: string;\n  wallet: string;\n  id: number;\n  logo: string | null;\n  data: TonConnectRequest;\n}\n\ninterface ConnectProofPayload {\n  timestamp: number;\n  bufferToSign: Buffer;\n  domainBuffer: Buffer;\n  payload: string;\n  origin: string;\n}\n\nconst tonConnectProofPayload = (\n  origin: string,\n  wallet: string,\n  payload: string\n): ConnectProofPayload => {\n  const timestamp = Math.round(Date.now() / 1000);\n  const timestampBuffer = Buffer.allocUnsafe(8);\n  timestampBuffer.writeBigInt64LE(BigInt(timestamp));\n\n  const domainBuffer = Buffer.from(new URL(origin).host);\n  const domainLengthBuffer = Buffer.allocUnsafe(4);\n  domainLengthBuffer.writeInt32LE(domainBuffer.byteLength);\n\n  const address = Address.parse(wallet);\n\n  const addressWorkchainBuffer = Buffer.allocUnsafe(4);\n  addressWorkchainBuffer.writeInt32BE(address.workChain);\n\n  const addressBuffer = Buffer.concat([addressWorkchainBuffer, address.hash]);\n\n  const messageBuffer = Buffer.concat([\n    Buffer.from(\"ton-proof-item-v2/\", \"utf8\"),\n    addressBuffer,\n    domainLengthBuffer,\n    domainBuffer,\n    timestampBuffer,\n    Buffer.from(payload),\n  ]);\n\n  const bufferToSign = Buffer.concat([\n    Buffer.from(\"ffff\", \"hex\"),\n    Buffer.from(\"ton-connect\", \"utf8\"),\n    Buffer.from(sha256_sync(messageBuffer)),\n  ]);\n\n  return {\n    timestamp,\n    bufferToSign,\n    domainBuffer,\n    payload,\n    origin,\n  };\n};\n\nconst toTonProofItemReplySuccess = (\n  proof: ConnectProofPayload,\n  signature: Buffer\n) => {\n  const result: TonProofItemReplySuccess = {\n    name: \"ton_proof\",\n    proof: {\n      timestamp: proof.timestamp, // 64-bit unix epoch time of the signing operation (seconds)\n      domain: {\n        lengthBytes: proof.domainBuffer.byteLength, // AppDomain Length\n        value: proof.domainBuffer.toString(\"utf8\"), // app domain name (as url part, without encoding)\n      },\n      signature: signature.toString(\"base64\"), // base64-encoded signature\n      payload: proof.payload, // payload from the request\n    },\n  };\n\n  return result;\n};\n\nconst tonConnectMnemonicSignature = async (\n  proof: ConnectProofPayload,\n  walletState: WalletState\n): Promise<TonProofItemReplySuccess> => {\n  const keyPair = await getWalletKeyPair(walletState);\n\n  const signature = nacl.sign.detached(\n    Buffer.from(sha256_sync(proof.bufferToSign)),\n    keyPair.secretKey\n  );\n\n  return toTonProofItemReplySuccess(proof, Buffer.from(signature));\n};\n\nexport const useAddConnectionMutation = () => {\n  const network = useContext(NetworkContext);\n  const networks = useContext(NetworksContext);\n  const account = useContext(AccountStateContext);\n\n  return useMutation<void, Error, ConnectParams>(\n    async ({ origin, wallet, id, logo, data }) => {\n      const currentNetwork = selectNetworkConfig(network, networks);\n      const walletState = account.wallets.find(\n        (item) => item.address === wallet\n      );\n      if (!walletState) {\n        throw new Error(\"Unexpected wallet state\");\n      }\n\n      const contract = getWalletContract(walletState);\n      const stateInit = beginCell()\n        .storeWritable(storeStateInit(contract.init))\n        .endCell();\n\n      const address = new Address(contract.workchain, stateInit.hash());\n\n      const payload: TonConnectItemReply[] = [];\n      for (let item of data.items) {\n        if (item.name === \"ton_addr\") {\n          const result: TonAddressItemReply = {\n            name: \"ton_addr\",\n            address: address.toRawString(),\n            network: currentNetwork.id,\n            walletStateInit: stateInit\n              .toBoc({ idx: true, crc32: true })\n              .toString(\"base64\"),\n          };\n          payload.push(result);\n        } else if (item.name === \"ton_proof\") {\n          const proof = tonConnectProofPayload(\n            origin,\n            walletState.address,\n            item.payload\n          );\n\n          if (walletState.ledger) {\n            throw new Error(\"Not implemented\");\n          } else {\n            payload.push(await tonConnectMnemonicSignature(proof, walletState));\n          }\n        }\n      }\n\n      const connections = await getConnections(network);\n\n      addDAppAccess(connections, logo, origin, [wallet], [Permission.base]);\n\n      await setConnections(connections, network);\n\n      sendBackground.message(\"approveRequest\", { id, payload });\n    }\n  );\n};\n\nexport const useSendMnemonicMutation = (origin: string) => {\n  const wallet = useContext(WalletStateContext);\n  const client = useContext(TonClientContext);\n\n  return useMutation<string, Error, TonConnectTransactionPayload>(\n    async (data) => {\n      const now = Date.now() / 1000;\n      if (now > data.valid_until) {\n        throw new Error(\"Transaction expired\");\n      }\n\n      await validateTonConnectRestrictions(origin, data.messages);\n\n      const keyPair = await getWalletKeyPair(wallet);\n      const walletContract = getWalletContract(wallet);\n      const contract = client.open(walletContract);\n\n      const seqno = await contract.getSeqno();\n      const balance = await contract.getBalance();\n\n      const total = data.messages.reduce(\n        (acc, item) => acc.plus(item.amount),\n        new BigNumber(\"0\")\n      );\n      await checkBalanceOrDie2(balance.toString(), total);\n\n      const transfer = createTonConnectTransfer(\n        wallet,\n        seqno,\n        data.messages,\n        Buffer.from(keyPair.secretKey)\n      );\n\n      await contract.send(transfer);\n\n      const externalMessage = beginCell()\n        .storeWritable(\n          storeMessage(\n            external({\n              to: contract.address,\n              init: seqno === 0 ? contract.init : undefined,\n              body: transfer,\n            })\n          )\n        )\n        .endCell()\n        .toBoc({ idx: false })\n        .toString(\"base64\");\n\n      return externalMessage;\n    }\n  );\n};\n\nexport const useLastBocMutation = () => {\n  const wallet = useContext(WalletStateContext);\n  const client = useContext(TonClientContext);\n\n  return useMutation(async () => {\n    const [tx] = await client.getTransactions(Address.parse(wallet.address), {\n      limit: 1,\n    });\n    return tx.stateUpdate.newHash.toString();\n  });\n};\n\nexport const useEstimateTransactions = (data: TonConnectTransactionPayload) => {\n  const wallet = useContext(WalletStateContext);\n  const client = useContext(TonClientContext);\n\n  return useQuery([QueryType.estimation, data], async () => {\n    const transfer = createTonConnectTransfer(wallet, 0, data.messages);\n\n    const result = await client.estimateExternalMessageFee(\n      Address.parse(wallet.address),\n      {\n        body: transfer,\n        initCode: null,\n        initData: null,\n        ignoreSignature: true,\n      }\n    );\n    return result.source_fees as EstimateFeeValues;\n  });\n};\n\nexport const useSendLedgerMutation = () => {\n  const wallet = useContext(WalletStateContext);\n  const client = useContext(TonClientContext);\n\n  return useMutation<number, Error, TonConnectTransactionPayloadMessage>(\n    async (item) => {\n      const contract = getWalletContract(wallet);\n      const tonContract = client.open(contract);\n\n      const seqno = await tonContract.getSeqno();\n\n      const transaction = parseLedgerTransaction(wallet, seqno, item);\n\n      const signed = await signLedgerTransaction(transaction);\n      await tonContract.send(signed);\n\n      return seqno;\n    }\n  );\n};\n","import { FC, useContext, useEffect, useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { TonConnectRequest } from \"../../../../libs/entries/notificationMessage\";\nimport { WalletState } from \"../../../../libs/entries/wallet\";\nimport { NotificationFields } from \"../../../../libs/event\";\nimport {\n  Body,\n  ButtonBottomRow,\n  ButtonNegative,\n  ButtonPositive,\n  Center,\n  Gap,\n  H1,\n  Scroll,\n  Text,\n} from \"../../../components/Components\";\nimport { DAppBadge } from \"../../../components/DAppBadge\";\nimport { Dots } from \"../../../components/Dots\";\nimport { AccountStateContext } from \"../../../context\";\nimport { sendBackground } from \"../../../event\";\nimport { FingerprintWalletLabel } from \"../../../FingerprintLabel\";\nimport { formatTonValue } from \"../../../utils\";\nimport { useBalance } from \"../../home/api\";\nimport { useAddConnectionMutation } from \"./api\";\n\nconst Label = styled.label`\n  display: flex;\n  gap: ${(props) => props.theme.padding};\n  margin: 5px ${(props) => props.theme.padding};\n  border-bottom: 1px solid ${(props) => props.theme.darkGray};\n`;\n\nconst Column = styled.div`\n  overflow: hidden;\n  flex-grow: 1;\n  padding: 5px;\n`;\n\nconst Row = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  line-height: 18px;\n`;\n\nconst Balance = styled(Row)`\n  color: ${(props) => props.theme.darkGray};\n`;\nconst BadgeLabel = styled.span`\n  margin-left: ${(props) => props.theme.padding};\n  border: 1px solid ${(props) => props.theme.darkGray};\n  background: ${(props) => props.theme.lightGray};\n  padding: 0px 8px;\n  border-radius: 20px;\n`;\n\nconst Wallet: FC<{\n  wallet: WalletState;\n  selected: boolean;\n  onSelect: (address: string) => void;\n}> = ({ wallet, selected, onSelect }) => {\n  const { data } = useBalance(wallet.address);\n\n  return (\n    <Label key={wallet.address}>\n      <input\n        type=\"radio\"\n        checked={selected}\n        onChange={() => onSelect(wallet.address)}\n      />\n      <Column>\n        <Row>\n          <b>{wallet.name}</b>\n          {wallet.ledger && <BadgeLabel>Ledger</BadgeLabel>}\n        </Row>\n        <Row>{wallet.address}</Row>\n        <Balance>{data ? formatTonValue(data) : \"-\"} ION</Balance>\n      </Column>\n    </Label>\n  );\n};\n\nexport const ConnectRequest: FC<\n  NotificationFields<\"tonConnectRequest\", TonConnectRequest> & {\n    onClose: () => void;\n  }\n> = ({ id, logo, origin, onClose, data }) => {\n  const account = useContext(AccountStateContext);\n\n  const [selectedWallet, setSelected] = useState(account.activeWallet);\n\n  const { mutateAsync, isLoading } = useAddConnectionMutation();\n\n  useEffect(() => {\n    if (!origin) {\n      sendBackground.message(\"rejectRequest\", id);\n      onClose();\n    }\n  }, []);\n\n  const onCancel = () => {\n    sendBackground.message(\"rejectRequest\", id);\n    onClose();\n  };\n\n  const onConnect = async () => {\n    if (!selectedWallet) return;\n    await mutateAsync({\n      id,\n      origin,\n      wallet: selectedWallet,\n      logo: logo ?? null,\n      data,\n    });\n    onClose();\n  };\n\n  const [wallet] = useMemo(() => {\n    return account.wallets.filter((item) => item.address === selectedWallet);\n  }, [account, selectedWallet]);\n\n  const isSignature = useMemo(\n    () => data.items.some((item) => item.name === \"ton_proof\"),\n    [data]\n  );\n\n  const disableConnect = isLoading || (isSignature && !!wallet.ledger);\n  return (\n    <Body>\n      <Center>\n        <DAppBadge logo={logo} origin={origin} />\n        <H1>Connect with ION Wallet</H1>\n        <Text>Select the account(s) to use on this site</Text>\n      </Center>\n      <Scroll>\n        {account.wallets.map((wallet) => (\n          <Wallet\n            key={wallet.address}\n            wallet={wallet}\n            selected={selectedWallet === wallet.address}\n            onSelect={setSelected}\n          />\n        ))}\n      </Scroll>\n      <Gap />\n      <ButtonBottomRow>\n        <ButtonNegative onClick={onCancel} disabled={isLoading}>\n          Cancel\n        </ButtonNegative>\n        <ButtonPositive onClick={onConnect} disabled={disableConnect}>\n          {isLoading ? (\n            <Dots>Loading</Dots>\n          ) : (\n            <FingerprintWalletLabel isSignature={isSignature} wallet={wallet}>\n              {isSignature && wallet.ledger ? \"Not Supported\" : \"Connect\"}\n            </FingerprintWalletLabel>\n          )}\n        </ButtonPositive>\n      </ButtonBottomRow>\n    </Body>\n  );\n};\n","import { Cell } from \"@ton/core\";\nimport { FC, useContext, useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  TonConnectTransactionPayload,\n  TonConnectTransactionPayloadMessage,\n} from \"../../../../libs/entries/notificationMessage\";\nimport { NotificationFields } from \"../../../../libs/event\";\nimport { delay } from \"../../../../libs/state/accountService\";\nimport { FingerprintLabel } from \"../../../FingerprintLabel\";\nimport {\n  Body,\n  ButtonNegative,\n  ButtonPositive,\n  ButtonRow,\n  Center,\n  ErrorMessage,\n  Gap,\n  H1,\n  Text,\n  TextLine,\n} from \"../../../components/Components\";\nimport { DAppBadge } from \"../../../components/DAppBadge\";\nimport { Dots } from \"../../../components/Dots\";\nimport { CheckIcon, SpinnerIcon, TimeIcon } from \"../../../components/Icons\";\nimport { Fees } from \"../../../components/send/Fees\";\nimport { WalletStateContext } from \"../../../context\";\nimport { askBackground, sendBackground } from \"../../../event\";\nimport { formatTonValue, toShortAddress } from \"../../../utils\";\nimport {\n  useEstimateTransactions,\n  useLastBocMutation,\n  useSendLedgerMutation,\n  useSendMnemonicMutation,\n} from \"./api\";\n\ninterface PayloadMessage extends TonConnectTransactionPayloadMessage {\n  isSend?: boolean;\n  isConfirmed?: boolean;\n}\n\nconst Row = styled.div`\n  display: flex;\n  gap: ${(props) => props.theme.padding};\n  margin: 5px ${(props) => props.theme.padding};\n  border-bottom: 1px solid ${(props) => props.theme.darkGray};\n  align-items: center;\n`;\n\nconst Column = styled.div`\n  margin: 5px ${(props) => props.theme.padding};\n  border-bottom: 1px solid ${(props) => props.theme.darkGray};\n`;\n\nconst Icon = styled.span`\n  font-size: 200%;\n`;\n\nconst Blue = styled.span`\n  color: ${(props) => props.theme.blueTon};\n`;\n\nconst TransactionItem: FC<{ message: PayloadMessage }> = ({ message }) => {\n  const name = useMemo(() => {\n    if (!message.payload) return;\n    try {\n      const cell = Cell.fromBase64(message.payload);\n      const operation = cell.asSlice().loadUint(32);\n      switch (operation) {\n        case 0x5fcc3d14:\n          return \"NFT Transfer\";\n        case 0xf8a7ea5:\n          return \"Jetton Transfer\";\n        default:\n          return undefined;\n      }\n    } catch (e) {\n      return undefined;\n    }\n  }, [message]);\n\n  return (\n    <Row>\n      <Icon>\n        {message.isConfirmed ? (\n          <Blue>\n            <CheckIcon />\n          </Blue>\n        ) : message.isSend ? (\n          <Blue>\n            <SpinnerIcon />\n          </Blue>\n        ) : (\n          <TimeIcon />\n        )}\n      </Icon>\n\n      <div>\n        <TextLine>{name ?? \"SENDING\"}:</TextLine>\n        <TextLine>\n          <b>{formatTonValue(String(message.amount))} ION</b> to{\" \"}\n          {toShortAddress(message.address || \"\", 6)}\n        </TextLine>\n      </div>\n    </Row>\n  );\n};\n\nconst timeout = 60 * 1000; // 60 sec\n\nconst SendLedgerTransactions: FC<{\n  data: TonConnectTransactionPayload;\n  onCancel: () => void;\n  onOk: (payload: string) => void;\n}> = ({ data, onCancel, onOk }) => {\n  const [isSending, setSending] = useState(false);\n  const [isConfirm, setConfirm] = useState(data.messages.length == 1);\n\n  const [items, setItems] = useState<PayloadMessage[]>(data.messages);\n  const [error, setError] = useState<Error | null>(null);\n\n  const { mutateAsync: getLastBoc } = useLastBocMutation();\n  const { data: estimation } = useEstimateTransactions(data);\n  const { mutateAsync: sendAsync, reset } = useSendLedgerMutation();\n\n  const onConfirm = async () => {\n    setSending(true);\n    try {\n      for (let i = 0; i < items.length; i++) {\n        let state = items[i];\n        if (state.isConfirmed) {\n          continue;\n        }\n        reset();\n\n        setItems((s) =>\n          s.map((item) =>\n            item === state ? (state = { ...state, isSend: true }) : item\n          )\n        );\n\n        const seqno = await sendAsync(state);\n\n        if (i !== items.length - 1) {\n          await askBackground<void>(timeout).message(\"confirmSeqNo\", seqno);\n        }\n\n        setItems((s) =>\n          s.map((item) =>\n            item === state ? (state = { ...state, isConfirmed: true }) : item\n          )\n        );\n      }\n\n      const payload = await getLastBoc().catch(() => \"\");\n      onOk(payload);\n    } catch (e) {\n      setError(e as Error);\n      setSending(false);\n      setItems((s) =>\n        s.map((item) => (item.isConfirmed ? item : { ...item, isSend: false }))\n      );\n    }\n  };\n\n  if (!isConfirm) {\n    return (\n      <>\n        <Column>\n          <Text>\n            The Ton Ledger App version 2.0 does not support sending multiple\n            transfers per transaction.\n          </Text>\n          <Text>You may sign and send multiple transfers one by one.</Text>\n          <Text>\n            Please do not interrupt the execution of transactions to get\n            multiple transfer expected result.\n          </Text>\n        </Column>\n        <Gap />\n        <ButtonRow>\n          <ButtonNegative onClick={onCancel}>Cancel</ButtonNegative>\n          <ButtonPositive onClick={() => setConfirm(true)}>\n            Agree\n          </ButtonPositive>\n        </ButtonRow>\n      </>\n    );\n  }\n\n  const disabledCancel = isSending;\n  const disabledConfirm = isSending;\n\n  return (\n    <>\n      {items.map((message, index) => (\n        <TransactionItem key={index} message={message} />\n      ))}\n      {estimation && (\n        <Row>\n          <Fees estimation={estimation} />\n        </Row>\n      )}\n\n      <Gap />\n      {error && <ErrorMessage>{error.message}</ErrorMessage>}\n\n      <ButtonRow>\n        <ButtonNegative onClick={onCancel} disabled={disabledCancel}>\n          Cancel\n        </ButtonNegative>\n        <ButtonPositive onClick={onConfirm} disabled={disabledConfirm}>\n          {isSending ? (\n            <Dots>Sending</Dots>\n          ) : (\n            <FingerprintLabel>Continue</FingerprintLabel>\n          )}\n        </ButtonPositive>\n      </ButtonRow>\n    </>\n  );\n};\n\nconst SendMnemonicTransactions: FC<{\n  data: TonConnectTransactionPayload;\n  origin: string;\n  onCancel: () => void;\n  onOk: (payload: string) => void;\n}> = ({ data, origin, onCancel, onOk }) => {\n  const [isSending, setSending] = useState(false);\n\n  const [items, setItems] = useState<PayloadMessage[]>(data.messages);\n  const [error, setError] = useState<Error | null>(null);\n\n  const { data: estimation } = useEstimateTransactions(data);\n\n  const {\n    mutateAsync,\n    reset,\n    error: sendError,\n  } = useSendMnemonicMutation(origin);\n\n  const onConfirm = async () => {\n    setSending(true);\n    try {\n      reset();\n      setItems((s) => s.map((item) => ({ ...item, isSend: true })));\n\n      const message = await mutateAsync(data);\n\n      setItems((s) => s.map((item) => ({ ...item, isConfirmed: true })));\n\n      onOk(message);\n    } catch (e) {\n      setError(e as Error);\n      setSending(false);\n    }\n  };\n\n  const disabledCancel = isSending;\n  const disabledConfirm = isSending || error != null;\n\n  return (\n    <>\n      {items.map((message, index) => (\n        <TransactionItem key={index} message={message} />\n      ))}\n      {estimation && (\n        <Row>\n          <Fees estimation={estimation} />\n        </Row>\n      )}\n\n      {sendError && <ErrorMessage>{sendError.message}</ErrorMessage>}\n      {error && <ErrorMessage>{error.message}</ErrorMessage>}\n\n      <Gap />\n      <ButtonRow>\n        <ButtonNegative onClick={onCancel} disabled={disabledCancel}>\n          Cancel\n        </ButtonNegative>\n        <ButtonPositive onClick={onConfirm} disabled={disabledConfirm}>\n          {isSending ? (\n            <Dots>Sending</Dots>\n          ) : (\n            <FingerprintLabel>Confirm</FingerprintLabel>\n          )}\n        </ButtonPositive>\n      </ButtonRow>\n    </>\n  );\n};\n\nexport const ConnectSendTransaction: FC<\n  NotificationFields<\"tonConnectSend\", TonConnectTransactionPayload> & {\n    onClose: () => void;\n  }\n> = ({ id, logo, origin, onClose, data }) => {\n  const wallet = useContext(WalletStateContext);\n\n  const onCancel = () => {\n    sendBackground.message(\"rejectRequest\", id);\n    onClose();\n  };\n\n  const onOk = async (payload: string) => {\n    sendBackground.message(\"approveRequest\", { id, payload });\n    await delay(500);\n    onClose();\n  };\n\n  return (\n    <Body>\n      <Center>\n        <DAppBadge logo={logo} origin={origin} />\n        <H1>\n          {data.messages.length > 1\n            ? `Send ${data.messages.length} Transactions`\n            : \"Send Transaction\"}\n        </H1>\n        <Text>Would you like to send transaction?</Text>\n      </Center>\n      {wallet.ledger ? (\n        <SendLedgerTransactions data={data} onCancel={onCancel} onOk={onOk} />\n      ) : (\n        <SendMnemonicTransactions\n          data={data}\n          origin={origin}\n          onCancel={onCancel}\n          onOk={onOk}\n        />\n      )}\n    </Body>\n  );\n};\n","import { useCallback, useEffect, useState } from \"react\";\nimport { NotificationData } from \"../../../libs/event\";\nimport { delay } from \"../../../libs/state/accountService\";\nimport { askBackground, sendBackground } from \"../../event\";\nimport { useNotificationAnalytics } from \"../Analytics\";\nimport { Loading } from \"../Loading\";\nimport { ImportJetton } from \"./asset/ImportJetton\";\nimport { ImportNft } from \"./asset/ImportNft\";\nimport { ConnectDApp } from \"./connect/ConnectDApp\";\nimport { DecryptMessage } from \"./crypto/DecryptMessage\";\nimport { EncryptMessage } from \"./crypto/EncryptMessage\";\nimport { DeployContract } from \"./deploy/DeployContract\";\nimport { ErrorBoundary } from \"./ErrorBoundary\";\nimport { SendTransaction } from \"./send/SendTransaction\";\nimport { SignPersonal } from \"./sign/PersonalSign\";\nimport { SignRaw } from \"./sign/SignRaw\";\nimport { SwitchNetwork } from \"./switch/SwitchNetwork\";\nimport { ConnectRequest } from \"./tonConnect/Connect\";\nimport { ConnectSendTransaction } from \"./tonConnect/SendTransaction\";\n\nexport const Notifications = () => {\n  const [data, setData] = useState<NotificationData | undefined>(undefined);\n\n  const reloadNotification = useCallback(async (wait = true) => {\n    setData(undefined);\n    if (wait) {\n      await delay(200);\n    }\n    try {\n      const item = await askBackground<NotificationData | undefined>().message(\n        \"getNotification\"\n      );\n      if (item) {\n        setData(item);\n      } else {\n        sendBackground.message(\"closePopUp\");\n      }\n    } catch (e) {\n      sendBackground.message(\"closePopUp\");\n    }\n  }, []);\n\n  useEffect(() => {\n    reloadNotification(false);\n  }, []);\n\n  useNotificationAnalytics(data);\n  if (!data) {\n    return <Loading />;\n  }\n\n  const Content = (() => {\n    switch (data.kind) {\n      case \"deploy\":\n        return <DeployContract {...data} onClose={reloadNotification} />;\n      case \"rawSign\":\n        return <SignRaw {...data} onClose={reloadNotification} />;\n      case \"personalSign\":\n        return <SignPersonal {...data} onClose={reloadNotification} />;\n      case \"switchNetwork\":\n        return <SwitchNetwork {...data} onClose={reloadNotification} />;\n      case \"importJetton\":\n        return <ImportJetton {...data} onClose={reloadNotification} />;\n      case \"importNft\":\n        return <ImportNft {...data} onClose={reloadNotification} />;\n      case \"connectDApp\":\n        return <ConnectDApp {...data} onClose={reloadNotification} />;\n      case \"sendTransaction\":\n        return <SendTransaction {...data} onClose={reloadNotification} />;\n      case \"tonConnectRequest\":\n        return <ConnectRequest {...data} onClose={reloadNotification} />;\n      case \"tonConnectSend\":\n        return (\n          <ConnectSendTransaction {...data} onClose={reloadNotification} />\n        );\n      case \"decryptMessage\":\n        return <DecryptMessage {...data} onClose={reloadNotification} />;\n      case \"encryptMessage\":\n        return <EncryptMessage {...data} onClose={reloadNotification} />;\n      default:\n        return <Loading />;\n    }\n  })();\n\n  return (\n    <ErrorBoundary\n      onClose={() => {\n        sendBackground.message(\"rejectRequest\", data.id);\n        reloadNotification();\n      }}\n    >\n      {Content}\n    </ErrorBoundary>\n  );\n};\n\nexport default Notifications;\n"],"names":["getJettonName","data","params","jettonContent","JettonStateSchema","state","symbol","image","name","decimals","JettonWallet","React","wallet","id","jettonMinterAddress","walletAddress","client","useContext","TonClientContext","useQuery","QueryType","getJettonFullData","useJettonWalletBalance","jettonBallance","toShortAddress","JettonRow","balance","ImportJetton","logo","origin","onClose","askBackground","message","wallets","Error","enabled","useOriginWallets","address","minter","open","JettonMinter","Address","getJettonData","useJettonMinterData","isFetching","error","network","NetworkContext","account","AccountStateContext","useQueryClient","useMutation","value","map","includes","assets","getWalletAssets","some","item","seeIfJettonAsset","minterAddress","push","setWalletAssets","saveAccountState","sendBackground","payload","undefined","useAddJettonMutation","mutateAsync","isLoading","addError","onAdd","onBack","useCallback","Loading","button","action","DAppBadge","H1","onClick","disabled","ImportNft","WalletStateContext","useState","nftData","setNftData","nftState","setNftState","nftCollectionState","setNftCollectionState","useNftDataMutation","nftDataAsync","isDataLoading","useNftContentMutation","nftStateAsync","isStateLoading","useNftCollectionDataMutation","nftCollectionStateAsync","isCollectionLoading","useAddNftMutation","addNftAsync","resetAdd","reset","isAddLoading","useDomainNftMutation","domainNftStateAsync","isDomainLoading","useEffect","collectionAddress","collection","catch","nftItemState","isOwnNft","useMemo","toString","ownerAddress","nftAddress","NftPayload","useGetAddress","publicKey","ton","TonProviderContext","findContract","base64ToBytes","DecryptMessage","options","getWalletKeyPair","keyPair","messageWithNonceAsUint8Array","decodeBase64","nonce","slice","nacl","length","senderPublicKey","getSharedSecret","bytesToHex","secretKey","sharedKey","decrypted","encodeBase64","useDecryptMutation","loadingSender","senderAddress","auth","useAuthConfiguration","isWebAuth","kind","onDecrypt","decryptedMessage","AddressBlock","label","EncryptMessage","randomBytes","messageAsBytes","receiverPublicKey","encrypted","concatBytes","useEncryptMutation","loadingReceiver","receiverAddress","onEncrypt","sendLedgerDeploy","tonClient","contract","getWalletContract","tonContract","getBalance","initialCode","initialData","initialMessage","amount","checkBalanceOrDie2","getSeqno","seqno","transaction","createLedgerTonTransfer","fromNano","signLedgerTransaction","signed","send","sendMnemonicDeploy","validateAddressRestrictions","Buffer","from","createTonTransfer","code","DeployContract","initDataCell","initCodeCell","workchain","initMessageCell","Cell","getContractAddress","testOnly","toDeployState","estimateExternalMessageFee","body","initCode","initData","ignoreSignature","source_fees","useEstimateDeploy","estimation","ledger","useSendDeploy","isDeploying","deployError","onDeploy","walletSeqNo","newContractAddress","loading","left","right","Fees","CodeBlock","Dots","FingerprintLabel","ErrorBoundary","hasError","errorInfo","console","this","props","children","Component","toData","dataType","beginCell","storeBuffer","endCell","SendTransaction","to","max","hex","isPreValidating","useTargetAddress","addressError","isAddressFetching","useSendTransaction","sendError","isSending","useEstimateTransaction","isValidating","onConfirm","seqNo","disabledCancel","disabledConfig","SignPersonal","valueHash","concat","signature","hexToBytes","usePersonalSignMutation","rawSignError","onSign","onLink","ExtensionPlatform","url","SignRaw","useSignMutation","SwitchNetwork","current","setStoreValue","onSwitch","parseLedgerTransaction","walletContract","asSlice","loadUint","NftTransferOpCode","transfer","parseNftTransfer","createLedgerNftTransferPayload","BigInt","init","JettonTransferOpCode","parseJettonTransfer","createLedgerJettonTransferPayload","tonConnectProofPayload","timestamp","Math","round","Date","now","timestampBuffer","allocUnsafe","writeBigInt64LE","domainBuffer","URL","host","domainLengthBuffer","writeInt32LE","byteLength","addressWorkchainBuffer","writeInt32BE","workChain","addressBuffer","hash","messageBuffer","bufferToSign","sha256_sync","toTonProofItemReplySuccess","proof","domain","lengthBytes","tonConnectMnemonicSignature","walletState","useEstimateTransactions","createTonConnectTransfer","messages","result","Label","styled","theme","padding","darkGray","Column","Row","Balance","BadgeLabel","lightGray","Wallet","selected","onSelect","useBalance","type","checked","onChange","formatTonValue","ConnectRequest","activeWallet","selectedWallet","setSelected","networks","NetworksContext","currentNetwork","selectNetworkConfig","find","stateInit","storeWritable","storeStateInit","items","toRawString","walletStateInit","toBoc","idx","crc32","getConnections","connections","addDAppAccess","Permission","setConnections","useAddConnectionMutation","onConnect","filter","isSignature","disableConnect","Icon","Blue","blueTon","TransactionItem","e","isConfirmed","isSend","String","SendLedgerTransactions","onCancel","onOk","setSending","isConfirm","setConfirm","setItems","setError","getLastBoc","getTransactions","limit","tx","stateUpdate","newHash","useLastBocMutation","useSendLedgerMutation","sendAsync","i","s","disabledConfirm","index","SendMnemonicTransactions","valid_until","validateTonConnectRestrictions","total","reduce","acc","plus","BigNumber","externalMessage","storeMessage","external","useSendMnemonicMutation","ConnectSendTransaction","delay","Notifications","setData","reloadNotification","wait","useNotificationAnalytics","Content","ConnectDApp"],"sourceRoot":""}